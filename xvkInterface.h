#pragma once

// This file should only be used when XVK_EXPOSE_NATIVE_VULKAN_FUNCTIONS_NAMESPACE is defined
// DO NOT EDIT THIS FILE
// This file was generated via the xvk generator version 0.3.1
// from Vulkan-Headers Version 145

namespace XVK_EXPOSE_NATIVE_VULKAN_FUNCTIONS_NAMESPACE {
	XVK_DEF_INTERFACE_FUNC_H( vkGetInstanceProcAddr )
	XVK_DEF_INTERFACE_FUNC_H( vkGetDeviceProcAddr )

	
	#ifdef VK_USE_PLATFORM_ANDROID_KHR
	#endif

	
	#ifdef VK_ENABLE_BETA_EXTENSIONS
	#endif

	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateInstance ) // const VkInstanceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkInstance* pInstance
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkEnumerateInstanceExtensionProperties ) // const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkEnumerateInstanceLayerProperties ) // uint32_t* pPropertyCount, VkLayerProperties* pProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkEnumerateInstanceVersion ) // uint32_t* pApiVersion
	
	#ifdef VK_USE_PLATFORM_FUCHSIA
	#endif

	
	#ifdef VK_USE_PLATFORM_GGP
	#endif

	
	#ifdef VK_USE_PLATFORM_IOS_MVK
	#endif

	
	#ifdef VK_USE_PLATFORM_MACOS_MVK
	#endif

	
	#ifdef VK_USE_PLATFORM_METAL_EXT
	#endif

	
	#ifdef VK_USE_PLATFORM_VI_NN
	#endif

	
	#ifdef VK_USE_PLATFORM_WAYLAND_KHR
	#endif

	
	#ifdef VK_USE_PLATFORM_WIN32_KHR
	#endif

	
	#ifdef VK_USE_PLATFORM_XCB_KHR
	#endif

	
	#ifdef VK_USE_PLATFORM_XLIB_KHR
	#endif

	
	#ifdef VK_USE_PLATFORM_XLIB_XRANDR_EXT
	#endif


	
	#ifdef VK_USE_PLATFORM_ANDROID_KHR
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateAndroidSurfaceKHR ) // VkInstance instance, const VkAndroidSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface
	#endif

	
	#ifdef VK_ENABLE_BETA_EXTENSIONS
	#endif

	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyInstance ) // VkInstance instance, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkEnumeratePhysicalDevices ) // VkInstance instance, uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceFeatures ) // VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceFormatProperties ) // VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceImageFormatProperties ) // VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceProperties ) // VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceQueueFamilyProperties ) // VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceMemoryProperties ) // VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateDevice ) // VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDevice* pDevice
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkEnumerateDeviceExtensionProperties ) // VkPhysicalDevice physicalDevice, const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkEnumerateDeviceLayerProperties ) // VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceSparseImageFormatProperties ) // VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkEnumeratePhysicalDeviceGroups ) // VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceFeatures2 ) // VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceProperties2 ) // VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceFormatProperties2 ) // VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceImageFormatProperties2 ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceQueueFamilyProperties2 ) // VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceMemoryProperties2 ) // VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceSparseImageFormatProperties2 ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceExternalBufferProperties ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceExternalFenceProperties ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceExternalSemaphoreProperties ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroySurfaceKHR ) // VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceSurfaceSupportKHR ) // VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceSurfaceCapabilitiesKHR ) // VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceSurfaceFormatsKHR ) // VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceSurfacePresentModesKHR ) // VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDevicePresentRectanglesKHR ) // VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pRectCount, VkRect2D* pRects
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceDisplayPropertiesKHR ) // VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPropertiesKHR* pProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceDisplayPlanePropertiesKHR ) // VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetDisplayPlaneSupportedDisplaysKHR ) // VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t* pDisplayCount, VkDisplayKHR* pDisplays
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetDisplayModePropertiesKHR ) // VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModePropertiesKHR* pProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateDisplayModeKHR ) // VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetDisplayPlaneCapabilitiesKHR ) // VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateDisplayPlaneSurfaceKHR ) // VkInstance instance, const VkDisplaySurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceFeatures2KHR ) // VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceProperties2KHR ) // VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceFormatProperties2KHR ) // VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceImageFormatProperties2KHR ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceQueueFamilyProperties2KHR ) // VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceMemoryProperties2KHR ) // VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceSparseImageFormatProperties2KHR ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkEnumeratePhysicalDeviceGroupsKHR ) // VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceExternalBufferPropertiesKHR ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceExternalSemaphorePropertiesKHR ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceExternalFencePropertiesKHR ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR ) // VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t* pCounterCount, VkPerformanceCounterKHR* pCounters, VkPerformanceCounterDescriptionKHR* pCounterDescriptions
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR ) // VkPhysicalDevice physicalDevice, const VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, uint32_t* pNumPasses
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceSurfaceCapabilities2KHR ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceSurfaceFormats2KHR ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceDisplayProperties2KHR ) // VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayProperties2KHR* pProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceDisplayPlaneProperties2KHR ) // VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetDisplayModeProperties2KHR ) // VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModeProperties2KHR* pProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetDisplayPlaneCapabilities2KHR ) // VkPhysicalDevice physicalDevice, const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateDebugReportCallbackEXT ) // VkInstance instance, const VkDebugReportCallbackCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyDebugReportCallbackEXT ) // VkInstance instance, VkDebugReportCallbackEXT callback, const VkAllocationCallbacks* pAllocator
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDebugReportMessageEXT ) // VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char* pLayerPrefix, const char* pMessage
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceExternalImageFormatPropertiesNV ) // VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkReleaseDisplayEXT ) // VkPhysicalDevice physicalDevice, VkDisplayKHR display
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceSurfaceCapabilities2EXT ) // VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateDebugUtilsMessengerEXT ) // VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pMessenger
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyDebugUtilsMessengerEXT ) // VkInstance instance, VkDebugUtilsMessengerEXT messenger, const VkAllocationCallbacks* pAllocator
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkSubmitDebugUtilsMessageEXT ) // VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceMultisamplePropertiesEXT ) // VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT* pMultisampleProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceCalibrateableTimeDomainsEXT ) // VkPhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainEXT* pTimeDomains
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceToolPropertiesEXT ) // VkPhysicalDevice physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolPropertiesEXT* pToolProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceCooperativeMatrixPropertiesNV ) // VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV ) // VkPhysicalDevice physicalDevice, uint32_t* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateHeadlessSurfaceEXT ) // VkInstance instance, const VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface
	
	#ifdef VK_USE_PLATFORM_FUCHSIA
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateImagePipeSurfaceFUCHSIA ) // VkInstance instance, const VkImagePipeSurfaceCreateInfoFUCHSIA* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface
	#endif

	
	#ifdef VK_USE_PLATFORM_GGP
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateStreamDescriptorSurfaceGGP ) // VkInstance instance, const VkStreamDescriptorSurfaceCreateInfoGGP* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface
	#endif

	
	#ifdef VK_USE_PLATFORM_IOS_MVK
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateIOSSurfaceMVK ) // VkInstance instance, const VkIOSSurfaceCreateInfoMVK* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface
	#endif

	
	#ifdef VK_USE_PLATFORM_MACOS_MVK
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateMacOSSurfaceMVK ) // VkInstance instance, const VkMacOSSurfaceCreateInfoMVK* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface
	#endif

	
	#ifdef VK_USE_PLATFORM_METAL_EXT
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateMetalSurfaceEXT ) // VkInstance instance, const VkMetalSurfaceCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface
	#endif

	
	#ifdef VK_USE_PLATFORM_VI_NN
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateViSurfaceNN ) // VkInstance instance, const VkViSurfaceCreateInfoNN* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface
	#endif

	
	#ifdef VK_USE_PLATFORM_WAYLAND_KHR
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateWaylandSurfaceKHR ) // VkInstance instance, const VkWaylandSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface
	/* VkBool32 */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceWaylandPresentationSupportKHR ) // VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, struct wl_display* display
	#endif

	
	#ifdef VK_USE_PLATFORM_WIN32_KHR
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateWin32SurfaceKHR ) // VkInstance instance, const VkWin32SurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface
	/* VkBool32 */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceWin32PresentationSupportKHR ) // VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceSurfacePresentModes2EXT ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes
	#endif

	
	#ifdef VK_USE_PLATFORM_XCB_KHR
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateXcbSurfaceKHR ) // VkInstance instance, const VkXcbSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface
	/* VkBool32 */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceXcbPresentationSupportKHR ) // VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, xcb_connection_t* connection, xcb_visualid_t visual_id
	#endif

	
	#ifdef VK_USE_PLATFORM_XLIB_KHR
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateXlibSurfaceKHR ) // VkInstance instance, const VkXlibSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface
	/* VkBool32 */ XVK_DEF_INTERFACE_FUNC_H( vkGetPhysicalDeviceXlibPresentationSupportKHR ) // VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, Display* dpy, VisualID visualID
	#endif

	
	#ifdef VK_USE_PLATFORM_XLIB_XRANDR_EXT
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkAcquireXlibDisplayEXT ) // VkPhysicalDevice physicalDevice, Display* dpy, VkDisplayKHR display
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetRandROutputDisplayEXT ) // VkPhysicalDevice physicalDevice, Display* dpy, RROutput rrOutput, VkDisplayKHR* pDisplay
	#endif


	
	#ifdef VK_USE_PLATFORM_ANDROID_KHR
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetAndroidHardwareBufferPropertiesANDROID ) // VkDevice device, const struct AHardwareBuffer* buffer, VkAndroidHardwareBufferPropertiesANDROID* pProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetMemoryAndroidHardwareBufferANDROID ) // VkDevice device, const VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo, struct AHardwareBuffer** pBuffer
	#endif

	
	#ifdef VK_ENABLE_BETA_EXTENSIONS
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateDeferredOperationKHR ) // VkDevice device, const VkAllocationCallbacks* pAllocator, VkDeferredOperationKHR* pDeferredOperation
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyDeferredOperationKHR ) // VkDevice device, VkDeferredOperationKHR operation, const VkAllocationCallbacks* pAllocator
	/* uint32_t */ XVK_DEF_INTERFACE_FUNC_H( vkGetDeferredOperationMaxConcurrencyKHR ) // VkDevice device, VkDeferredOperationKHR operation
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetDeferredOperationResultKHR ) // VkDevice device, VkDeferredOperationKHR operation
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkDeferredOperationJoinKHR ) // VkDevice device, VkDeferredOperationKHR operation
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateAccelerationStructureKHR ) // VkDevice                                           device, const VkAccelerationStructureCreateInfoKHR*        pCreateInfo, const VkAllocationCallbacks*       pAllocator, VkAccelerationStructureKHR*                        pAccelerationStructure
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetAccelerationStructureMemoryRequirementsKHR ) // VkDevice device, const VkAccelerationStructureMemoryRequirementsInfoKHR* pInfo, VkMemoryRequirements2* pMemoryRequirements
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBuildAccelerationStructureKHR ) // VkCommandBuffer                                    commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkAccelerationStructureBuildOffsetInfoKHR* const* ppOffsetInfos
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBuildAccelerationStructureIndirectKHR ) // VkCommandBuffer                  commandBuffer, const VkAccelerationStructureBuildGeometryInfoKHR* pInfo, VkBuffer                                           indirectBuffer, VkDeviceSize                                       indirectOffset, uint32_t                                           indirectStride
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkBuildAccelerationStructureKHR ) // VkDevice                                           device, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkAccelerationStructureBuildOffsetInfoKHR* const* ppOffsetInfos
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCopyAccelerationStructureKHR ) // VkDevice device, const VkCopyAccelerationStructureInfoKHR* pInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCopyAccelerationStructureToMemoryKHR ) // VkDevice device, const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCopyMemoryToAccelerationStructureKHR ) // VkDevice device, const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkWriteAccelerationStructuresPropertiesKHR ) // VkDevice device, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType  queryType, size_t       dataSize, void* pData, size_t stride
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdCopyAccelerationStructureKHR ) // VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureInfoKHR* pInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdCopyAccelerationStructureToMemoryKHR ) // VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdCopyMemoryToAccelerationStructureKHR ) // VkCommandBuffer commandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdTraceRaysKHR ) // VkCommandBuffer commandBuffer, const VkStridedBufferRegionKHR* pRaygenShaderBindingTable, const VkStridedBufferRegionKHR* pMissShaderBindingTable, const VkStridedBufferRegionKHR* pHitShaderBindingTable, const VkStridedBufferRegionKHR* pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateRayTracingPipelinesKHR ) // VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines
	/* VkDeviceAddress */ XVK_DEF_INTERFACE_FUNC_H( vkGetAccelerationStructureDeviceAddressKHR ) // VkDevice device, const VkAccelerationStructureDeviceAddressInfoKHR* pInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetRayTracingCaptureReplayShaderGroupHandlesKHR ) // VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdTraceRaysIndirectKHR ) // VkCommandBuffer commandBuffer, const VkStridedBufferRegionKHR* pRaygenShaderBindingTable, const VkStridedBufferRegionKHR* pMissShaderBindingTable, const VkStridedBufferRegionKHR* pHitShaderBindingTable, const VkStridedBufferRegionKHR* pCallableShaderBindingTable, VkBuffer buffer, VkDeviceSize offset
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetDeviceAccelerationStructureCompatibilityKHR ) // VkDevice device, const VkAccelerationStructureVersionKHR* version
	#endif

	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyDevice ) // VkDevice device, const VkAllocationCallbacks* pAllocator
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetDeviceQueue ) // VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkQueueSubmit ) // VkQueue queue, uint32_t submitCount, const VkSubmitInfo* pSubmits, VkFence fence
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkQueueWaitIdle ) // VkQueue queue
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkDeviceWaitIdle ) // VkDevice device
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkAllocateMemory ) // VkDevice device, const VkMemoryAllocateInfo* pAllocateInfo, const VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkFreeMemory ) // VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkMapMemory ) // VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkUnmapMemory ) // VkDevice device, VkDeviceMemory memory
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkFlushMappedMemoryRanges ) // VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkInvalidateMappedMemoryRanges ) // VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetDeviceMemoryCommitment ) // VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkBindBufferMemory ) // VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkBindImageMemory ) // VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetBufferMemoryRequirements ) // VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetImageMemoryRequirements ) // VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetImageSparseMemoryRequirements ) // VkDevice device, VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkQueueBindSparse ) // VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo* pBindInfo, VkFence fence
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateFence ) // VkDevice device, const VkFenceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyFence ) // VkDevice device, VkFence fence, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkResetFences ) // VkDevice device, uint32_t fenceCount, const VkFence* pFences
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetFenceStatus ) // VkDevice device, VkFence fence
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkWaitForFences ) // VkDevice device, uint32_t fenceCount, const VkFence* pFences, VkBool32 waitAll, uint64_t timeout
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateSemaphore ) // VkDevice device, const VkSemaphoreCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroySemaphore ) // VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateEvent ) // VkDevice device, const VkEventCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkEvent* pEvent
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyEvent ) // VkDevice device, VkEvent event, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetEventStatus ) // VkDevice device, VkEvent event
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkSetEvent ) // VkDevice device, VkEvent event
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkResetEvent ) // VkDevice device, VkEvent event
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateQueryPool ) // VkDevice device, const VkQueryPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyQueryPool ) // VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetQueryPoolResults ) // VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateBuffer ) // VkDevice device, const VkBufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyBuffer ) // VkDevice device, VkBuffer buffer, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateBufferView ) // VkDevice device, const VkBufferViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferView* pView
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyBufferView ) // VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateImage ) // VkDevice device, const VkImageCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImage* pImage
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyImage ) // VkDevice device, VkImage image, const VkAllocationCallbacks* pAllocator
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetImageSubresourceLayout ) // VkDevice device, VkImage image, const VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateImageView ) // VkDevice device, const VkImageViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImageView* pView
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyImageView ) // VkDevice device, VkImageView imageView, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateShaderModule ) // VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyShaderModule ) // VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreatePipelineCache ) // VkDevice device, const VkPipelineCacheCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyPipelineCache ) // VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPipelineCacheData ) // VkDevice device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkMergePipelineCaches ) // VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache* pSrcCaches
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateGraphicsPipelines ) // VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateComputePipelines ) // VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyPipeline ) // VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreatePipelineLayout ) // VkDevice device, const VkPipelineLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyPipelineLayout ) // VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateSampler ) // VkDevice device, const VkSamplerCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSampler* pSampler
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroySampler ) // VkDevice device, VkSampler sampler, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateDescriptorSetLayout ) // VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyDescriptorSetLayout ) // VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateDescriptorPool ) // VkDevice device, const VkDescriptorPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyDescriptorPool ) // VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkResetDescriptorPool ) // VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkAllocateDescriptorSets ) // VkDevice device, const VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkFreeDescriptorSets ) // VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkUpdateDescriptorSets ) // VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet* pDescriptorCopies
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateFramebuffer ) // VkDevice device, const VkFramebufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyFramebuffer ) // VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateRenderPass ) // VkDevice device, const VkRenderPassCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyRenderPass ) // VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks* pAllocator
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetRenderAreaGranularity ) // VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateCommandPool ) // VkDevice device, const VkCommandPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyCommandPool ) // VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkResetCommandPool ) // VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkAllocateCommandBuffers ) // VkDevice device, const VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkFreeCommandBuffers ) // VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkBeginCommandBuffer ) // VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo* pBeginInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkEndCommandBuffer ) // VkCommandBuffer commandBuffer
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkResetCommandBuffer ) // VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBindPipeline ) // VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetViewport ) // VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetScissor ) // VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetLineWidth ) // VkCommandBuffer commandBuffer, float lineWidth
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetDepthBias ) // VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetBlendConstants ) // VkCommandBuffer commandBuffer, const float blendConstants[4]
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetDepthBounds ) // VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetStencilCompareMask ) // VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetStencilWriteMask ) // VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetStencilReference ) // VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBindDescriptorSets ) // VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBindIndexBuffer ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBindVertexBuffers ) // VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDraw ) // VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDrawIndexed ) // VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDrawIndirect ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDrawIndexedIndirect ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDispatch ) // VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDispatchIndirect ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdCopyBuffer ) // VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdCopyImage ) // VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBlitImage ) // VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdCopyBufferToImage ) // VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdCopyImageToBuffer ) // VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdUpdateBuffer ) // VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void* pData
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdFillBuffer ) // VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdClearColorImage ) // VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdClearDepthStencilImage ) // VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdClearAttachments ) // VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdResolveImage ) // VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetEvent ) // VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdResetEvent ) // VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdWaitEvents ) // VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdPipelineBarrier ) // VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBeginQuery ) // VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdEndQuery ) // VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdResetQueryPool ) // VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdWriteTimestamp ) // VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdCopyQueryPoolResults ) // VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdPushConstants ) // VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBeginRenderPass ) // VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdNextSubpass ) // VkCommandBuffer commandBuffer, VkSubpassContents contents
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdEndRenderPass ) // VkCommandBuffer commandBuffer
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdExecuteCommands ) // VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkBindBufferMemory2 ) // VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo* pBindInfos
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkBindImageMemory2 ) // VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo* pBindInfos
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetDeviceGroupPeerMemoryFeatures ) // VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetDeviceMask ) // VkCommandBuffer commandBuffer, uint32_t deviceMask
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDispatchBase ) // VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetImageMemoryRequirements2 ) // VkDevice device, const VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetBufferMemoryRequirements2 ) // VkDevice device, const VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetImageSparseMemoryRequirements2 ) // VkDevice device, const VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkTrimCommandPool ) // VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetDeviceQueue2 ) // VkDevice device, const VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateSamplerYcbcrConversion ) // VkDevice device, const VkSamplerYcbcrConversionCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroySamplerYcbcrConversion ) // VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateDescriptorUpdateTemplate ) // VkDevice device, const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyDescriptorUpdateTemplate ) // VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkUpdateDescriptorSetWithTemplate ) // VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void* pData
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetDescriptorSetLayoutSupport ) // VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDrawIndirectCount ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDrawIndexedIndirectCount ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateRenderPass2 ) // VkDevice device, const VkRenderPassCreateInfo2* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBeginRenderPass2 ) // VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo*      pRenderPassBegin, const VkSubpassBeginInfo*      pSubpassBeginInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdNextSubpass2 ) // VkCommandBuffer commandBuffer, const VkSubpassBeginInfo*      pSubpassBeginInfo, const VkSubpassEndInfo*        pSubpassEndInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdEndRenderPass2 ) // VkCommandBuffer commandBuffer, const VkSubpassEndInfo*        pSubpassEndInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkResetQueryPool ) // VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetSemaphoreCounterValue ) // VkDevice device, VkSemaphore semaphore, uint64_t* pValue
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkWaitSemaphores ) // VkDevice device, const VkSemaphoreWaitInfo* pWaitInfo, uint64_t timeout
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkSignalSemaphore ) // VkDevice device, const VkSemaphoreSignalInfo* pSignalInfo
	/* VkDeviceAddress */ XVK_DEF_INTERFACE_FUNC_H( vkGetBufferDeviceAddress ) // VkDevice device, const VkBufferDeviceAddressInfo* pInfo
	/* uint64_t */ XVK_DEF_INTERFACE_FUNC_H( vkGetBufferOpaqueCaptureAddress ) // VkDevice device, const VkBufferDeviceAddressInfo* pInfo
	/* uint64_t */ XVK_DEF_INTERFACE_FUNC_H( vkGetDeviceMemoryOpaqueCaptureAddress ) // VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateSwapchainKHR ) // VkDevice device, const VkSwapchainCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroySwapchainKHR ) // VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetSwapchainImagesKHR ) // VkDevice device, VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkAcquireNextImageKHR ) // VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkQueuePresentKHR ) // VkQueue queue, const VkPresentInfoKHR* pPresentInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetDeviceGroupPresentCapabilitiesKHR ) // VkDevice device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetDeviceGroupSurfacePresentModesKHR ) // VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* pModes
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkAcquireNextImage2KHR ) // VkDevice device, const VkAcquireNextImageInfoKHR* pAcquireInfo, uint32_t* pImageIndex
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateSharedSwapchainsKHR ) // VkDevice device, uint32_t swapchainCount, const VkSwapchainCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetDeviceGroupPeerMemoryFeaturesKHR ) // VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetDeviceMaskKHR ) // VkCommandBuffer commandBuffer, uint32_t deviceMask
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDispatchBaseKHR ) // VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkTrimCommandPoolKHR ) // VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetMemoryFdKHR ) // VkDevice device, const VkMemoryGetFdInfoKHR* pGetFdInfo, int* pFd
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetMemoryFdPropertiesKHR ) // VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkImportSemaphoreFdKHR ) // VkDevice device, const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetSemaphoreFdKHR ) // VkDevice device, const VkSemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdPushDescriptorSetKHR ) // VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdPushDescriptorSetWithTemplateKHR ) // VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void* pData
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateDescriptorUpdateTemplateKHR ) // VkDevice device, const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyDescriptorUpdateTemplateKHR ) // VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkUpdateDescriptorSetWithTemplateKHR ) // VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void* pData
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateRenderPass2KHR ) // VkDevice device, const VkRenderPassCreateInfo2* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBeginRenderPass2KHR ) // VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo*      pRenderPassBegin, const VkSubpassBeginInfo*      pSubpassBeginInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdNextSubpass2KHR ) // VkCommandBuffer commandBuffer, const VkSubpassBeginInfo*      pSubpassBeginInfo, const VkSubpassEndInfo*        pSubpassEndInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdEndRenderPass2KHR ) // VkCommandBuffer commandBuffer, const VkSubpassEndInfo*        pSubpassEndInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetSwapchainStatusKHR ) // VkDevice device, VkSwapchainKHR swapchain
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkImportFenceFdKHR ) // VkDevice device, const VkImportFenceFdInfoKHR* pImportFenceFdInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetFenceFdKHR ) // VkDevice device, const VkFenceGetFdInfoKHR* pGetFdInfo, int* pFd
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkAcquireProfilingLockKHR ) // VkDevice device, const VkAcquireProfilingLockInfoKHR* pInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkReleaseProfilingLockKHR ) // VkDevice device
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetImageMemoryRequirements2KHR ) // VkDevice device, const VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetBufferMemoryRequirements2KHR ) // VkDevice device, const VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetImageSparseMemoryRequirements2KHR ) // VkDevice device, const VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateSamplerYcbcrConversionKHR ) // VkDevice device, const VkSamplerYcbcrConversionCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroySamplerYcbcrConversionKHR ) // VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkBindBufferMemory2KHR ) // VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo* pBindInfos
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkBindImageMemory2KHR ) // VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo* pBindInfos
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetDescriptorSetLayoutSupportKHR ) // VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDrawIndirectCountKHR ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDrawIndexedIndirectCountKHR ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetSemaphoreCounterValueKHR ) // VkDevice device, VkSemaphore semaphore, uint64_t* pValue
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkWaitSemaphoresKHR ) // VkDevice device, const VkSemaphoreWaitInfo* pWaitInfo, uint64_t timeout
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkSignalSemaphoreKHR ) // VkDevice device, const VkSemaphoreSignalInfo* pSignalInfo
	/* VkDeviceAddress */ XVK_DEF_INTERFACE_FUNC_H( vkGetBufferDeviceAddressKHR ) // VkDevice device, const VkBufferDeviceAddressInfo* pInfo
	/* uint64_t */ XVK_DEF_INTERFACE_FUNC_H( vkGetBufferOpaqueCaptureAddressKHR ) // VkDevice device, const VkBufferDeviceAddressInfo* pInfo
	/* uint64_t */ XVK_DEF_INTERFACE_FUNC_H( vkGetDeviceMemoryOpaqueCaptureAddressKHR ) // VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPipelineExecutablePropertiesKHR ) // VkDevice                        device, const VkPipelineInfoKHR*        pPipelineInfo, uint32_t* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPipelineExecutableStatisticsKHR ) // VkDevice                        device, const VkPipelineExecutableInfoKHR*  pExecutableInfo, uint32_t* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPipelineExecutableInternalRepresentationsKHR ) // VkDevice                        device, const VkPipelineExecutableInfoKHR*  pExecutableInfo, uint32_t* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkDebugMarkerSetObjectTagEXT ) // VkDevice device, const VkDebugMarkerObjectTagInfoEXT* pTagInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkDebugMarkerSetObjectNameEXT ) // VkDevice device, const VkDebugMarkerObjectNameInfoEXT* pNameInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDebugMarkerBeginEXT ) // VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDebugMarkerEndEXT ) // VkCommandBuffer commandBuffer
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDebugMarkerInsertEXT ) // VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBindTransformFeedbackBuffersEXT ) // VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBeginTransformFeedbackEXT ) // VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer* pCounterBuffers, const VkDeviceSize* pCounterBufferOffsets
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdEndTransformFeedbackEXT ) // VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer* pCounterBuffers, const VkDeviceSize* pCounterBufferOffsets
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBeginQueryIndexedEXT ) // VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdEndQueryIndexedEXT ) // VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDrawIndirectByteCountEXT ) // VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride
	/* uint32_t */ XVK_DEF_INTERFACE_FUNC_H( vkGetImageViewHandleNVX ) // VkDevice device, const VkImageViewHandleInfoNVX* pInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetImageViewAddressNVX ) // VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX* pProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDrawIndirectCountAMD ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDrawIndexedIndirectCountAMD ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetShaderInfoAMD ) // VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t* pInfoSize, void* pInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBeginConditionalRenderingEXT ) // VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdEndConditionalRenderingEXT ) // VkCommandBuffer commandBuffer
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetViewportWScalingNV ) // VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportWScalingNV* pViewportWScalings
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkDisplayPowerControlEXT ) // VkDevice device, VkDisplayKHR display, const VkDisplayPowerInfoEXT* pDisplayPowerInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkRegisterDeviceEventEXT ) // VkDevice device, const VkDeviceEventInfoEXT* pDeviceEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkRegisterDisplayEventEXT ) // VkDevice device, VkDisplayKHR display, const VkDisplayEventInfoEXT* pDisplayEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetSwapchainCounterEXT ) // VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t* pCounterValue
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetRefreshCycleDurationGOOGLE ) // VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPastPresentationTimingGOOGLE ) // VkDevice device, VkSwapchainKHR swapchain, uint32_t* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetDiscardRectangleEXT ) // VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const VkRect2D* pDiscardRectangles
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkSetHdrMetadataEXT ) // VkDevice device, uint32_t swapchainCount, const VkSwapchainKHR* pSwapchains, const VkHdrMetadataEXT* pMetadata
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkSetDebugUtilsObjectNameEXT ) // VkDevice device, const VkDebugUtilsObjectNameInfoEXT* pNameInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkSetDebugUtilsObjectTagEXT ) // VkDevice device, const VkDebugUtilsObjectTagInfoEXT* pTagInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkQueueBeginDebugUtilsLabelEXT ) // VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkQueueEndDebugUtilsLabelEXT ) // VkQueue queue
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkQueueInsertDebugUtilsLabelEXT ) // VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBeginDebugUtilsLabelEXT ) // VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdEndDebugUtilsLabelEXT ) // VkCommandBuffer commandBuffer
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdInsertDebugUtilsLabelEXT ) // VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetSampleLocationsEXT ) // VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT* pSampleLocationsInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetImageDrmFormatModifierPropertiesEXT ) // VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT* pProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateValidationCacheEXT ) // VkDevice device, const VkValidationCacheCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkValidationCacheEXT* pValidationCache
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyValidationCacheEXT ) // VkDevice device, VkValidationCacheEXT validationCache, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkMergeValidationCachesEXT ) // VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount, const VkValidationCacheEXT* pSrcCaches
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetValidationCacheDataEXT ) // VkDevice device, VkValidationCacheEXT validationCache, size_t* pDataSize, void* pData
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBindShadingRateImageNV ) // VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetViewportShadingRatePaletteNV ) // VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkShadingRatePaletteNV* pShadingRatePalettes
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetCoarseSampleOrderNV ) // VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const VkCoarseSampleOrderCustomNV* pCustomSampleOrders
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateAccelerationStructureNV ) // VkDevice device, const VkAccelerationStructureCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkAccelerationStructureNV* pAccelerationStructure
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyAccelerationStructureKHR ) // VkDevice device, VkAccelerationStructureKHR accelerationStructure, const VkAllocationCallbacks* pAllocator
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyAccelerationStructureNV ) // VkDevice device, VkAccelerationStructureKHR accelerationStructure, const VkAllocationCallbacks* pAllocator
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetAccelerationStructureMemoryRequirementsNV ) // VkDevice device, const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkBindAccelerationStructureMemoryKHR ) // VkDevice device, uint32_t bindInfoCount, const VkBindAccelerationStructureMemoryInfoKHR* pBindInfos
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkBindAccelerationStructureMemoryNV ) // VkDevice device, uint32_t bindInfoCount, const VkBindAccelerationStructureMemoryInfoKHR* pBindInfos
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBuildAccelerationStructureNV ) // VkCommandBuffer commandBuffer, const VkAccelerationStructureInfoNV* pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureKHR dst, VkAccelerationStructureKHR src, VkBuffer scratch, VkDeviceSize scratchOffset
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdCopyAccelerationStructureNV ) // VkCommandBuffer commandBuffer, VkAccelerationStructureKHR dst, VkAccelerationStructureKHR src, VkCopyAccelerationStructureModeKHR mode
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdTraceRaysNV ) // VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateRayTracingPipelinesNV ) // VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoNV* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetRayTracingShaderGroupHandlesKHR ) // VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetRayTracingShaderGroupHandlesNV ) // VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetAccelerationStructureHandleNV ) // VkDevice device, VkAccelerationStructureKHR accelerationStructure, size_t dataSize, void* pData
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdWriteAccelerationStructuresPropertiesKHR ) // VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdWriteAccelerationStructuresPropertiesNV ) // VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCompileDeferredNV ) // VkDevice device, VkPipeline pipeline, uint32_t shader
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetMemoryHostPointerPropertiesEXT ) // VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const void* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdWriteBufferMarkerAMD ) // VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetCalibratedTimestampsEXT ) // VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoEXT* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDrawMeshTasksNV ) // VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDrawMeshTasksIndirectNV ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdDrawMeshTasksIndirectCountNV ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetExclusiveScissorNV ) // VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkRect2D* pExclusiveScissors
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetCheckpointNV ) // VkCommandBuffer commandBuffer, const void* pCheckpointMarker
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetQueueCheckpointDataNV ) // VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkInitializePerformanceApiINTEL ) // VkDevice device, const VkInitializePerformanceApiInfoINTEL* pInitializeInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkUninitializePerformanceApiINTEL ) // VkDevice device
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetPerformanceMarkerINTEL ) // VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL* pMarkerInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetPerformanceStreamMarkerINTEL ) // VkCommandBuffer commandBuffer, const VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetPerformanceOverrideINTEL ) // VkCommandBuffer commandBuffer, const VkPerformanceOverrideInfoINTEL* pOverrideInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkAcquirePerformanceConfigurationINTEL ) // VkDevice device, const VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, VkPerformanceConfigurationINTEL* pConfiguration
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkReleasePerformanceConfigurationINTEL ) // VkDevice device, VkPerformanceConfigurationINTEL configuration
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkQueueSetPerformanceConfigurationINTEL ) // VkQueue queue, VkPerformanceConfigurationINTEL configuration
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetPerformanceParameterINTEL ) // VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkSetLocalDimmingAMD ) // VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable
	/* VkDeviceAddress */ XVK_DEF_INTERFACE_FUNC_H( vkGetBufferDeviceAddressEXT ) // VkDevice device, const VkBufferDeviceAddressInfo* pInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetLineStippleEXT ) // VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkResetQueryPoolEXT ) // VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetCullModeEXT ) // VkCommandBuffer commandBuffer, VkCullModeFlags cullMode
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetFrontFaceEXT ) // VkCommandBuffer commandBuffer, VkFrontFace frontFace
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetPrimitiveTopologyEXT ) // VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetViewportWithCountEXT ) // VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport* pViewports
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetScissorWithCountEXT ) // VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D* pScissors
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBindVertexBuffers2EXT ) // VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes, const VkDeviceSize* pStrides
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetDepthTestEnableEXT ) // VkCommandBuffer commandBuffer, VkBool32 depthTestEnable
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetDepthWriteEnableEXT ) // VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetDepthCompareOpEXT ) // VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetDepthBoundsTestEnableEXT ) // VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetStencilTestEnableEXT ) // VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdSetStencilOpEXT ) // VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetGeneratedCommandsMemoryRequirementsNV ) // VkDevice device, const VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2* pMemoryRequirements
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdPreprocessGeneratedCommandsNV ) // VkCommandBuffer commandBuffer, const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdExecuteGeneratedCommandsNV ) // VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkCmdBindPipelineShaderGroupNV ) // VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32_t groupIndex
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreateIndirectCommandsLayoutNV ) // VkDevice device, const VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutNV* pIndirectCommandsLayout
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyIndirectCommandsLayoutNV ) // VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkCreatePrivateDataSlotEXT ) // VkDevice device, const VkPrivateDataSlotCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPrivateDataSlotEXT* pPrivateDataSlot
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkDestroyPrivateDataSlotEXT ) // VkDevice device, VkPrivateDataSlotEXT privateDataSlot, const VkAllocationCallbacks* pAllocator
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkSetPrivateDataEXT ) // VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlotEXT privateDataSlot, uint64_t data
	/* void */ XVK_DEF_INTERFACE_FUNC_H( vkGetPrivateDataEXT ) // VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlotEXT privateDataSlot, uint64_t* pData
	
	#ifdef VK_USE_PLATFORM_FUCHSIA
	#endif

	
	#ifdef VK_USE_PLATFORM_GGP
	#endif

	
	#ifdef VK_USE_PLATFORM_IOS_MVK
	#endif

	
	#ifdef VK_USE_PLATFORM_MACOS_MVK
	#endif

	
	#ifdef VK_USE_PLATFORM_METAL_EXT
	#endif

	
	#ifdef VK_USE_PLATFORM_VI_NN
	#endif

	
	#ifdef VK_USE_PLATFORM_WAYLAND_KHR
	#endif

	
	#ifdef VK_USE_PLATFORM_WIN32_KHR
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetMemoryWin32HandleKHR ) // VkDevice device, const VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetMemoryWin32HandlePropertiesKHR ) // VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, HANDLE handle, VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkImportSemaphoreWin32HandleKHR ) // VkDevice device, const VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetSemaphoreWin32HandleKHR ) // VkDevice device, const VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkImportFenceWin32HandleKHR ) // VkDevice device, const VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetFenceWin32HandleKHR ) // VkDevice device, const VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetMemoryWin32HandleNV ) // VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagsNV handleType, HANDLE* pHandle
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkAcquireFullScreenExclusiveModeEXT ) // VkDevice device, VkSwapchainKHR swapchain
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkReleaseFullScreenExclusiveModeEXT ) // VkDevice device, VkSwapchainKHR swapchain
	/* VkResult */ XVK_DEF_INTERFACE_FUNC_H( vkGetDeviceGroupSurfacePresentModes2EXT ) // VkDevice device, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkDeviceGroupPresentModeFlagsKHR* pModes
	#endif

	
	#ifdef VK_USE_PLATFORM_XCB_KHR
	#endif

	
	#ifdef VK_USE_PLATFORM_XLIB_KHR
	#endif

	
	#ifdef VK_USE_PLATFORM_XLIB_XRANDR_EXT
	#endif


}
