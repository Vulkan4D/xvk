#pragma once

// DO NOT EDIT THIS FILE
// This file was generated via the xvk generator version 0.1.0
// from Vulkan-Headers Version 126

#include "xvkBase.hpp"

namespace xvk { namespace Interface {
	
	class LoaderInterface : public xvk::Base::LoaderBase {
	public:
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateInstance ) // const VkInstanceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkInstance* pInstance
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkEnumerateInstanceExtensionProperties ) // const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkEnumerateInstanceLayerProperties ) // uint32_t* pPropertyCount, VkLayerProperties* pProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkEnumerateInstanceVersion ) // uint32_t* pApiVersion

	protected: 
		using LoaderBase::LoaderBase;
		virtual ~LoaderInterface(){}
		void LoadFunctionPointersInterface() {
			LOAD_XVK_GLOBAL_FUNC( vkCreateInstance )
			LOAD_XVK_GLOBAL_FUNC( vkEnumerateInstanceExtensionProperties )
			LOAD_XVK_GLOBAL_FUNC( vkEnumerateInstanceLayerProperties )
			LOAD_XVK_GLOBAL_FUNC( vkEnumerateInstanceVersion )

		}
	};
	
	class InstanceInterface : public xvk::Base::InstanceBase {
	public:
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyInstance ) // VkInstance instance, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkEnumeratePhysicalDevices ) // VkInstance instance, uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceFeatures ) // VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceFormatProperties ) // VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceImageFormatProperties ) // VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceProperties ) // VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceQueueFamilyProperties ) // VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceMemoryProperties ) // VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateDevice ) // VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDevice* pDevice
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkEnumerateDeviceExtensionProperties ) // VkPhysicalDevice physicalDevice, const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkEnumerateDeviceLayerProperties ) // VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceSparseImageFormatProperties ) // VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkEnumeratePhysicalDeviceGroups ) // VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceFeatures2 ) // VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceProperties2 ) // VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceFormatProperties2 ) // VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceImageFormatProperties2 ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceQueueFamilyProperties2 ) // VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceMemoryProperties2 ) // VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceSparseImageFormatProperties2 ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceExternalBufferProperties ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceExternalFenceProperties ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceExternalSemaphoreProperties ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroySurfaceKHR ) // VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceSurfaceSupportKHR ) // VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceSurfaceCapabilitiesKHR ) // VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceSurfaceFormatsKHR ) // VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceSurfacePresentModesKHR ) // VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDevicePresentRectanglesKHR ) // VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pRectCount, VkRect2D* pRects
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceDisplayPropertiesKHR ) // VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPropertiesKHR* pProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceDisplayPlanePropertiesKHR ) // VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetDisplayPlaneSupportedDisplaysKHR ) // VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t* pDisplayCount, VkDisplayKHR* pDisplays
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetDisplayModePropertiesKHR ) // VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModePropertiesKHR* pProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateDisplayModeKHR ) // VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetDisplayPlaneCapabilitiesKHR ) // VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateDisplayPlaneSurfaceKHR ) // VkInstance instance, const VkDisplaySurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceFeatures2KHR ) // VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceProperties2KHR ) // VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceFormatProperties2KHR ) // VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceImageFormatProperties2KHR ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceQueueFamilyProperties2KHR ) // VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceMemoryProperties2KHR ) // VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceSparseImageFormatProperties2KHR ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkEnumeratePhysicalDeviceGroupsKHR ) // VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceExternalBufferPropertiesKHR ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceExternalSemaphorePropertiesKHR ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceExternalFencePropertiesKHR ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceSurfaceCapabilities2KHR ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceSurfaceFormats2KHR ) // VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceDisplayProperties2KHR ) // VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayProperties2KHR* pProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceDisplayPlaneProperties2KHR ) // VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetDisplayModeProperties2KHR ) // VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModeProperties2KHR* pProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetDisplayPlaneCapabilities2KHR ) // VkPhysicalDevice physicalDevice, const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateDebugReportCallbackEXT ) // VkInstance instance, const VkDebugReportCallbackCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyDebugReportCallbackEXT ) // VkInstance instance, VkDebugReportCallbackEXT callback, const VkAllocationCallbacks* pAllocator
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDebugReportMessageEXT ) // VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char* pLayerPrefix, const char* pMessage
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceExternalImageFormatPropertiesNV ) // VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX ) // VkPhysicalDevice physicalDevice, VkDeviceGeneratedCommandsFeaturesNVX* pFeatures, VkDeviceGeneratedCommandsLimitsNVX* pLimits
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkReleaseDisplayEXT ) // VkPhysicalDevice physicalDevice, VkDisplayKHR display
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceSurfaceCapabilities2EXT ) // VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateDebugUtilsMessengerEXT ) // VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pMessenger
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyDebugUtilsMessengerEXT ) // VkInstance instance, VkDebugUtilsMessengerEXT messenger, const VkAllocationCallbacks* pAllocator
		/* void */ DEF_XVK_INTERFACE_FUNC( vkSubmitDebugUtilsMessageEXT ) // VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceMultisamplePropertiesEXT ) // VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT* pMultisampleProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceCalibrateableTimeDomainsEXT ) // VkPhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainEXT* pTimeDomains
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceCooperativeMatrixPropertiesNV ) // VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV ) // VkPhysicalDevice physicalDevice, uint32_t* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateHeadlessSurfaceEXT ) // VkInstance instance, const VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface

		inline void DestroyInstance (const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyInstance)
			vkDestroyInstance(handle, pAllocator);
		}

		inline VkResult EnumeratePhysicalDevices (uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices) {
			XVK_CHECK_FUNC(vkEnumeratePhysicalDevices)
			return vkEnumeratePhysicalDevices(handle, pPhysicalDeviceCount, pPhysicalDevices);
		}

		inline void GetPhysicalDeviceFeatures (VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceFeatures)
			vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures);
		}

		inline void GetPhysicalDeviceFormatProperties (VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceFormatProperties)
			vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);
		}

		inline VkResult GetPhysicalDeviceImageFormatProperties (VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceImageFormatProperties)
			return vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
		}

		inline void GetPhysicalDeviceProperties (VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceProperties)
			vkGetPhysicalDeviceProperties(physicalDevice, pProperties);
		}

		inline void GetPhysicalDeviceQueueFamilyProperties (VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceQueueFamilyProperties)
			vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
		}

		inline void GetPhysicalDeviceMemoryProperties (VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceMemoryProperties)
			vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);
		}

		inline VkResult CreateDevice (VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDevice* pDevice) {
			XVK_CHECK_FUNC(vkCreateDevice)
			return vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);
		}

		inline VkResult EnumerateDeviceExtensionProperties (VkPhysicalDevice physicalDevice, const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties) {
			XVK_CHECK_FUNC(vkEnumerateDeviceExtensionProperties)
			return vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties);
		}

		inline VkResult EnumerateDeviceLayerProperties (VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties) {
			XVK_CHECK_FUNC(vkEnumerateDeviceLayerProperties)
			return vkEnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);
		}

		inline void GetPhysicalDeviceSparseImageFormatProperties (VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceSparseImageFormatProperties)
			vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
		}

		inline VkResult EnumeratePhysicalDeviceGroups (uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties) {
			XVK_CHECK_FUNC(vkEnumeratePhysicalDeviceGroups)
			return vkEnumeratePhysicalDeviceGroups(handle, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
		}

		inline void GetPhysicalDeviceFeatures2 (VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceFeatures2)
			vkGetPhysicalDeviceFeatures2(physicalDevice, pFeatures);
		}

		inline void GetPhysicalDeviceProperties2 (VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceProperties2)
			vkGetPhysicalDeviceProperties2(physicalDevice, pProperties);
		}

		inline void GetPhysicalDeviceFormatProperties2 (VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceFormatProperties2)
			vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);
		}

		inline VkResult GetPhysicalDeviceImageFormatProperties2 (VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceImageFormatProperties2)
			return vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties);
		}

		inline void GetPhysicalDeviceQueueFamilyProperties2 (VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceQueueFamilyProperties2)
			vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
		}

		inline void GetPhysicalDeviceMemoryProperties2 (VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceMemoryProperties2)
			vkGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);
		}

		inline void GetPhysicalDeviceSparseImageFormatProperties2 (VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceSparseImageFormatProperties2)
			vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
		}

		inline void GetPhysicalDeviceExternalBufferProperties (VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceExternalBufferProperties)
			vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
		}

		inline void GetPhysicalDeviceExternalFenceProperties (VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceExternalFenceProperties)
			vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
		}

		inline void GetPhysicalDeviceExternalSemaphoreProperties (VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceExternalSemaphoreProperties)
			vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
		}

		inline void DestroySurfaceKHR (VkSurfaceKHR surface, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroySurfaceKHR)
			vkDestroySurfaceKHR(handle, surface, pAllocator);
		}

		inline VkResult GetPhysicalDeviceSurfaceSupportKHR (VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceSurfaceSupportKHR)
			return vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported);
		}

		inline VkResult GetPhysicalDeviceSurfaceCapabilitiesKHR (VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceSurfaceCapabilitiesKHR)
			return vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities);
		}

		inline VkResult GetPhysicalDeviceSurfaceFormatsKHR (VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceSurfaceFormatsKHR)
			return vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
		}

		inline VkResult GetPhysicalDeviceSurfacePresentModesKHR (VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceSurfacePresentModesKHR)
			return vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes);
		}

		inline VkResult GetPhysicalDevicePresentRectanglesKHR (VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pRectCount, VkRect2D* pRects) {
			XVK_CHECK_FUNC(vkGetPhysicalDevicePresentRectanglesKHR)
			return vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, pRectCount, pRects);
		}

		inline VkResult GetPhysicalDeviceDisplayPropertiesKHR (VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPropertiesKHR* pProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceDisplayPropertiesKHR)
			return vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
		}

		inline VkResult GetPhysicalDeviceDisplayPlanePropertiesKHR (VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceDisplayPlanePropertiesKHR)
			return vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, pPropertyCount, pProperties);
		}

		inline VkResult GetDisplayPlaneSupportedDisplaysKHR (VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t* pDisplayCount, VkDisplayKHR* pDisplays) {
			XVK_CHECK_FUNC(vkGetDisplayPlaneSupportedDisplaysKHR)
			return vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, pDisplayCount, pDisplays);
		}

		inline VkResult GetDisplayModePropertiesKHR (VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModePropertiesKHR* pProperties) {
			XVK_CHECK_FUNC(vkGetDisplayModePropertiesKHR)
			return vkGetDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties);
		}

		inline VkResult CreateDisplayModeKHR (VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode) {
			XVK_CHECK_FUNC(vkCreateDisplayModeKHR)
			return vkCreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);
		}

		inline VkResult GetDisplayPlaneCapabilitiesKHR (VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities) {
			XVK_CHECK_FUNC(vkGetDisplayPlaneCapabilitiesKHR)
			return vkGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);
		}

		inline VkResult CreateDisplayPlaneSurfaceKHR (const VkDisplaySurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
			XVK_CHECK_FUNC(vkCreateDisplayPlaneSurfaceKHR)
			return vkCreateDisplayPlaneSurfaceKHR(handle, pCreateInfo, pAllocator, pSurface);
		}

		inline void GetPhysicalDeviceFeatures2KHR (VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceFeatures2KHR)
			vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);
		}

		inline void GetPhysicalDeviceProperties2KHR (VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceProperties2KHR)
			vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);
		}

		inline void GetPhysicalDeviceFormatProperties2KHR (VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceFormatProperties2KHR)
			vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);
		}

		inline VkResult GetPhysicalDeviceImageFormatProperties2KHR (VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceImageFormatProperties2KHR)
			return vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice, pImageFormatInfo, pImageFormatProperties);
		}

		inline void GetPhysicalDeviceQueueFamilyProperties2KHR (VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceQueueFamilyProperties2KHR)
			vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
		}

		inline void GetPhysicalDeviceMemoryProperties2KHR (VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceMemoryProperties2KHR)
			vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);
		}

		inline void GetPhysicalDeviceSparseImageFormatProperties2KHR (VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceSparseImageFormatProperties2KHR)
			vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
		}

		inline VkResult EnumeratePhysicalDeviceGroupsKHR (uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties) {
			XVK_CHECK_FUNC(vkEnumeratePhysicalDeviceGroupsKHR)
			return vkEnumeratePhysicalDeviceGroupsKHR(handle, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
		}

		inline void GetPhysicalDeviceExternalBufferPropertiesKHR (VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceExternalBufferPropertiesKHR)
			vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
		}

		inline void GetPhysicalDeviceExternalSemaphorePropertiesKHR (VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceExternalSemaphorePropertiesKHR)
			vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
		}

		inline void GetPhysicalDeviceExternalFencePropertiesKHR (VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceExternalFencePropertiesKHR)
			vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
		}

		inline VkResult GetPhysicalDeviceSurfaceCapabilities2KHR (VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceSurfaceCapabilities2KHR)
			return vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
		}

		inline VkResult GetPhysicalDeviceSurfaceFormats2KHR (VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceSurfaceFormats2KHR)
			return vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
		}

		inline VkResult GetPhysicalDeviceDisplayProperties2KHR (VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayProperties2KHR* pProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceDisplayProperties2KHR)
			return vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, pPropertyCount, pProperties);
		}

		inline VkResult GetPhysicalDeviceDisplayPlaneProperties2KHR (VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceDisplayPlaneProperties2KHR)
			return vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, pPropertyCount, pProperties);
		}

		inline VkResult GetDisplayModeProperties2KHR (VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModeProperties2KHR* pProperties) {
			XVK_CHECK_FUNC(vkGetDisplayModeProperties2KHR)
			return vkGetDisplayModeProperties2KHR(physicalDevice, display, pPropertyCount, pProperties);
		}

		inline VkResult GetDisplayPlaneCapabilities2KHR (VkPhysicalDevice physicalDevice, const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities) {
			XVK_CHECK_FUNC(vkGetDisplayPlaneCapabilities2KHR)
			return vkGetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, pCapabilities);
		}

		inline VkResult CreateDebugReportCallbackEXT (const VkDebugReportCallbackCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback) {
			XVK_CHECK_FUNC(vkCreateDebugReportCallbackEXT)
			return vkCreateDebugReportCallbackEXT(handle, pCreateInfo, pAllocator, pCallback);
		}

		inline void DestroyDebugReportCallbackEXT (VkDebugReportCallbackEXT callback, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyDebugReportCallbackEXT)
			vkDestroyDebugReportCallbackEXT(handle, callback, pAllocator);
		}

		inline void DebugReportMessageEXT (VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char* pLayerPrefix, const char* pMessage) {
			XVK_CHECK_FUNC(vkDebugReportMessageEXT)
			vkDebugReportMessageEXT(handle, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
		}

		inline VkResult GetPhysicalDeviceExternalImageFormatPropertiesNV (VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceExternalImageFormatPropertiesNV)
			return vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
		}

		inline void GetPhysicalDeviceGeneratedCommandsPropertiesNVX (VkPhysicalDevice physicalDevice, VkDeviceGeneratedCommandsFeaturesNVX* pFeatures, VkDeviceGeneratedCommandsLimitsNVX* pLimits) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX)
			vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(physicalDevice, pFeatures, pLimits);
		}

		inline VkResult ReleaseDisplayEXT (VkPhysicalDevice physicalDevice, VkDisplayKHR display) {
			XVK_CHECK_FUNC(vkReleaseDisplayEXT)
			return vkReleaseDisplayEXT(physicalDevice, display);
		}

		inline VkResult GetPhysicalDeviceSurfaceCapabilities2EXT (VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceSurfaceCapabilities2EXT)
			return vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice, surface, pSurfaceCapabilities);
		}

		inline VkResult CreateDebugUtilsMessengerEXT (const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pMessenger) {
			XVK_CHECK_FUNC(vkCreateDebugUtilsMessengerEXT)
			return vkCreateDebugUtilsMessengerEXT(handle, pCreateInfo, pAllocator, pMessenger);
		}

		inline void DestroyDebugUtilsMessengerEXT (VkDebugUtilsMessengerEXT messenger, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyDebugUtilsMessengerEXT)
			vkDestroyDebugUtilsMessengerEXT(handle, messenger, pAllocator);
		}

		inline void SubmitDebugUtilsMessageEXT (VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData) {
			XVK_CHECK_FUNC(vkSubmitDebugUtilsMessageEXT)
			vkSubmitDebugUtilsMessageEXT(handle, messageSeverity, messageTypes, pCallbackData);
		}

		inline void GetPhysicalDeviceMultisamplePropertiesEXT (VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT* pMultisampleProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceMultisamplePropertiesEXT)
			vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, pMultisampleProperties);
		}

		inline VkResult GetPhysicalDeviceCalibrateableTimeDomainsEXT (VkPhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainEXT* pTimeDomains) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceCalibrateableTimeDomainsEXT)
			return vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, pTimeDomainCount, pTimeDomains);
		}

		inline VkResult GetPhysicalDeviceCooperativeMatrixPropertiesNV (VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceCooperativeMatrixPropertiesNV)
			return vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, pPropertyCount, pProperties);
		}

		inline VkResult GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV (VkPhysicalDevice physicalDevice, uint32_t* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations) {
			XVK_CHECK_FUNC(vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV)
			return vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, pCombinationCount, pCombinations);
		}

		inline VkResult CreateHeadlessSurfaceEXT (const VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
			XVK_CHECK_FUNC(vkCreateHeadlessSurfaceEXT)
			return vkCreateHeadlessSurfaceEXT(handle, pCreateInfo, pAllocator, pSurface);
		}

	protected: 
		using InstanceBase::InstanceBase;
		virtual ~InstanceInterface(){}
		void LoadFunctionPointersInterface() override {
			LOAD_XVK_INSTANCE_FUNC( vkDestroyInstance )
			LOAD_XVK_INSTANCE_FUNC( vkEnumeratePhysicalDevices )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceFeatures )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceFormatProperties )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceImageFormatProperties )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceProperties )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceQueueFamilyProperties )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceMemoryProperties )
			LOAD_XVK_INSTANCE_FUNC( vkCreateDevice )
			LOAD_XVK_INSTANCE_FUNC( vkEnumerateDeviceExtensionProperties )
			LOAD_XVK_INSTANCE_FUNC( vkEnumerateDeviceLayerProperties )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceSparseImageFormatProperties )
			LOAD_XVK_INSTANCE_FUNC( vkEnumeratePhysicalDeviceGroups )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceFeatures2 )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceProperties2 )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceFormatProperties2 )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceImageFormatProperties2 )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceQueueFamilyProperties2 )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceMemoryProperties2 )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceSparseImageFormatProperties2 )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceExternalBufferProperties )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceExternalFenceProperties )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceExternalSemaphoreProperties )
			LOAD_XVK_INSTANCE_FUNC( vkDestroySurfaceKHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceSurfaceSupportKHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceSurfaceCapabilitiesKHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceSurfaceFormatsKHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceSurfacePresentModesKHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDevicePresentRectanglesKHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceDisplayPropertiesKHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceDisplayPlanePropertiesKHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetDisplayPlaneSupportedDisplaysKHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetDisplayModePropertiesKHR )
			LOAD_XVK_INSTANCE_FUNC( vkCreateDisplayModeKHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetDisplayPlaneCapabilitiesKHR )
			LOAD_XVK_INSTANCE_FUNC( vkCreateDisplayPlaneSurfaceKHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceFeatures2KHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceProperties2KHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceFormatProperties2KHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceImageFormatProperties2KHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceQueueFamilyProperties2KHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceMemoryProperties2KHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceSparseImageFormatProperties2KHR )
			LOAD_XVK_INSTANCE_FUNC( vkEnumeratePhysicalDeviceGroupsKHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceExternalBufferPropertiesKHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceExternalSemaphorePropertiesKHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceExternalFencePropertiesKHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceSurfaceCapabilities2KHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceSurfaceFormats2KHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceDisplayProperties2KHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceDisplayPlaneProperties2KHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetDisplayModeProperties2KHR )
			LOAD_XVK_INSTANCE_FUNC( vkGetDisplayPlaneCapabilities2KHR )
			LOAD_XVK_INSTANCE_FUNC( vkCreateDebugReportCallbackEXT )
			LOAD_XVK_INSTANCE_FUNC( vkDestroyDebugReportCallbackEXT )
			LOAD_XVK_INSTANCE_FUNC( vkDebugReportMessageEXT )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceExternalImageFormatPropertiesNV )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX )
			LOAD_XVK_INSTANCE_FUNC( vkReleaseDisplayEXT )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceSurfaceCapabilities2EXT )
			LOAD_XVK_INSTANCE_FUNC( vkCreateDebugUtilsMessengerEXT )
			LOAD_XVK_INSTANCE_FUNC( vkDestroyDebugUtilsMessengerEXT )
			LOAD_XVK_INSTANCE_FUNC( vkSubmitDebugUtilsMessageEXT )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceMultisamplePropertiesEXT )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceCalibrateableTimeDomainsEXT )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceCooperativeMatrixPropertiesNV )
			LOAD_XVK_INSTANCE_FUNC( vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV )
			LOAD_XVK_INSTANCE_FUNC( vkCreateHeadlessSurfaceEXT )

		}
	};
	
	class DeviceInterface : public xvk::Base::DeviceBase {
	public:
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyDevice ) // VkDevice device, const VkAllocationCallbacks* pAllocator
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetDeviceQueue ) // VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkQueueSubmit ) // VkQueue queue, uint32_t submitCount, const VkSubmitInfo* pSubmits, VkFence fence
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkQueueWaitIdle ) // VkQueue queue
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkDeviceWaitIdle ) // VkDevice device
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkAllocateMemory ) // VkDevice device, const VkMemoryAllocateInfo* pAllocateInfo, const VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory
		/* void */ DEF_XVK_INTERFACE_FUNC( vkFreeMemory ) // VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkMapMemory ) // VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData
		/* void */ DEF_XVK_INTERFACE_FUNC( vkUnmapMemory ) // VkDevice device, VkDeviceMemory memory
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkFlushMappedMemoryRanges ) // VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkInvalidateMappedMemoryRanges ) // VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetDeviceMemoryCommitment ) // VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkBindBufferMemory ) // VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkBindImageMemory ) // VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetBufferMemoryRequirements ) // VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetImageMemoryRequirements ) // VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetImageSparseMemoryRequirements ) // VkDevice device, VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkQueueBindSparse ) // VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo* pBindInfo, VkFence fence
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateFence ) // VkDevice device, const VkFenceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyFence ) // VkDevice device, VkFence fence, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkResetFences ) // VkDevice device, uint32_t fenceCount, const VkFence* pFences
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetFenceStatus ) // VkDevice device, VkFence fence
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkWaitForFences ) // VkDevice device, uint32_t fenceCount, const VkFence* pFences, VkBool32 waitAll, uint64_t timeout
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateSemaphore ) // VkDevice device, const VkSemaphoreCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroySemaphore ) // VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateEvent ) // VkDevice device, const VkEventCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkEvent* pEvent
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyEvent ) // VkDevice device, VkEvent event, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetEventStatus ) // VkDevice device, VkEvent event
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkSetEvent ) // VkDevice device, VkEvent event
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkResetEvent ) // VkDevice device, VkEvent event
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateQueryPool ) // VkDevice device, const VkQueryPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyQueryPool ) // VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetQueryPoolResults ) // VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateBuffer ) // VkDevice device, const VkBufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyBuffer ) // VkDevice device, VkBuffer buffer, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateBufferView ) // VkDevice device, const VkBufferViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferView* pView
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyBufferView ) // VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateImage ) // VkDevice device, const VkImageCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImage* pImage
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyImage ) // VkDevice device, VkImage image, const VkAllocationCallbacks* pAllocator
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetImageSubresourceLayout ) // VkDevice device, VkImage image, const VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateImageView ) // VkDevice device, const VkImageViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImageView* pView
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyImageView ) // VkDevice device, VkImageView imageView, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateShaderModule ) // VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyShaderModule ) // VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreatePipelineCache ) // VkDevice device, const VkPipelineCacheCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyPipelineCache ) // VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPipelineCacheData ) // VkDevice device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkMergePipelineCaches ) // VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache* pSrcCaches
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateGraphicsPipelines ) // VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateComputePipelines ) // VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyPipeline ) // VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreatePipelineLayout ) // VkDevice device, const VkPipelineLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyPipelineLayout ) // VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateSampler ) // VkDevice device, const VkSamplerCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSampler* pSampler
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroySampler ) // VkDevice device, VkSampler sampler, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateDescriptorSetLayout ) // VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyDescriptorSetLayout ) // VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateDescriptorPool ) // VkDevice device, const VkDescriptorPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyDescriptorPool ) // VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkResetDescriptorPool ) // VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkAllocateDescriptorSets ) // VkDevice device, const VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkFreeDescriptorSets ) // VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets
		/* void */ DEF_XVK_INTERFACE_FUNC( vkUpdateDescriptorSets ) // VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet* pDescriptorCopies
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateFramebuffer ) // VkDevice device, const VkFramebufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyFramebuffer ) // VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateRenderPass ) // VkDevice device, const VkRenderPassCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyRenderPass ) // VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks* pAllocator
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetRenderAreaGranularity ) // VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateCommandPool ) // VkDevice device, const VkCommandPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyCommandPool ) // VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkResetCommandPool ) // VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkAllocateCommandBuffers ) // VkDevice device, const VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers
		/* void */ DEF_XVK_INTERFACE_FUNC( vkFreeCommandBuffers ) // VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkBeginCommandBuffer ) // VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo* pBeginInfo
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkEndCommandBuffer ) // VkCommandBuffer commandBuffer
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkResetCommandBuffer ) // VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdBindPipeline ) // VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetViewport ) // VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetScissor ) // VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetLineWidth ) // VkCommandBuffer commandBuffer, float lineWidth
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetDepthBias ) // VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetBlendConstants ) // VkCommandBuffer commandBuffer, const float blendConstants[4]
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetDepthBounds ) // VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetStencilCompareMask ) // VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetStencilWriteMask ) // VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetStencilReference ) // VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdBindDescriptorSets ) // VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdBindIndexBuffer ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdBindVertexBuffers ) // VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDraw ) // VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDrawIndexed ) // VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDrawIndirect ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDrawIndexedIndirect ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDispatch ) // VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDispatchIndirect ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdCopyBuffer ) // VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdCopyImage ) // VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdBlitImage ) // VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdCopyBufferToImage ) // VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdCopyImageToBuffer ) // VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdUpdateBuffer ) // VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void* pData
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdFillBuffer ) // VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdClearColorImage ) // VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdClearDepthStencilImage ) // VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdClearAttachments ) // VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdResolveImage ) // VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetEvent ) // VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdResetEvent ) // VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdWaitEvents ) // VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdPipelineBarrier ) // VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdBeginQuery ) // VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdEndQuery ) // VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdResetQueryPool ) // VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdWriteTimestamp ) // VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdCopyQueryPoolResults ) // VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdPushConstants ) // VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdBeginRenderPass ) // VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdNextSubpass ) // VkCommandBuffer commandBuffer, VkSubpassContents contents
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdEndRenderPass ) // VkCommandBuffer commandBuffer
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdExecuteCommands ) // VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkBindBufferMemory2 ) // VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo* pBindInfos
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkBindImageMemory2 ) // VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo* pBindInfos
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetDeviceGroupPeerMemoryFeatures ) // VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetDeviceMask ) // VkCommandBuffer commandBuffer, uint32_t deviceMask
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDispatchBase ) // VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetImageMemoryRequirements2 ) // VkDevice device, const VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetBufferMemoryRequirements2 ) // VkDevice device, const VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetImageSparseMemoryRequirements2 ) // VkDevice device, const VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements
		/* void */ DEF_XVK_INTERFACE_FUNC( vkTrimCommandPool ) // VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetDeviceQueue2 ) // VkDevice device, const VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateSamplerYcbcrConversion ) // VkDevice device, const VkSamplerYcbcrConversionCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroySamplerYcbcrConversion ) // VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateDescriptorUpdateTemplate ) // VkDevice device, const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyDescriptorUpdateTemplate ) // VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator
		/* void */ DEF_XVK_INTERFACE_FUNC( vkUpdateDescriptorSetWithTemplate ) // VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void* pData
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetDescriptorSetLayoutSupport ) // VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateSwapchainKHR ) // VkDevice device, const VkSwapchainCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroySwapchainKHR ) // VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetSwapchainImagesKHR ) // VkDevice device, VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkAcquireNextImageKHR ) // VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkQueuePresentKHR ) // VkQueue queue, const VkPresentInfoKHR* pPresentInfo
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetDeviceGroupPresentCapabilitiesKHR ) // VkDevice device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetDeviceGroupSurfacePresentModesKHR ) // VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* pModes
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkAcquireNextImage2KHR ) // VkDevice device, const VkAcquireNextImageInfoKHR* pAcquireInfo, uint32_t* pImageIndex
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateSharedSwapchainsKHR ) // VkDevice device, uint32_t swapchainCount, const VkSwapchainCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetDeviceGroupPeerMemoryFeaturesKHR ) // VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetDeviceMaskKHR ) // VkCommandBuffer commandBuffer, uint32_t deviceMask
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDispatchBaseKHR ) // VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ
		/* void */ DEF_XVK_INTERFACE_FUNC( vkTrimCommandPoolKHR ) // VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetMemoryFdKHR ) // VkDevice device, const VkMemoryGetFdInfoKHR* pGetFdInfo, int* pFd
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetMemoryFdPropertiesKHR ) // VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkImportSemaphoreFdKHR ) // VkDevice device, const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetSemaphoreFdKHR ) // VkDevice device, const VkSemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdPushDescriptorSetKHR ) // VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdPushDescriptorSetWithTemplateKHR ) // VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void* pData
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateDescriptorUpdateTemplateKHR ) // VkDevice device, const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyDescriptorUpdateTemplateKHR ) // VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator
		/* void */ DEF_XVK_INTERFACE_FUNC( vkUpdateDescriptorSetWithTemplateKHR ) // VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void* pData
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateRenderPass2KHR ) // VkDevice device, const VkRenderPassCreateInfo2KHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdBeginRenderPass2KHR ) // VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo*      pRenderPassBegin, const VkSubpassBeginInfoKHR*      pSubpassBeginInfo
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdNextSubpass2KHR ) // VkCommandBuffer commandBuffer, const VkSubpassBeginInfoKHR*      pSubpassBeginInfo, const VkSubpassEndInfoKHR*        pSubpassEndInfo
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdEndRenderPass2KHR ) // VkCommandBuffer commandBuffer, const VkSubpassEndInfoKHR*        pSubpassEndInfo
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetSwapchainStatusKHR ) // VkDevice device, VkSwapchainKHR swapchain
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkImportFenceFdKHR ) // VkDevice device, const VkImportFenceFdInfoKHR* pImportFenceFdInfo
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetFenceFdKHR ) // VkDevice device, const VkFenceGetFdInfoKHR* pGetFdInfo, int* pFd
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetImageMemoryRequirements2KHR ) // VkDevice device, const VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetBufferMemoryRequirements2KHR ) // VkDevice device, const VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetImageSparseMemoryRequirements2KHR ) // VkDevice device, const VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateSamplerYcbcrConversionKHR ) // VkDevice device, const VkSamplerYcbcrConversionCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroySamplerYcbcrConversionKHR ) // VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkBindBufferMemory2KHR ) // VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo* pBindInfos
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkBindImageMemory2KHR ) // VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo* pBindInfos
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetDescriptorSetLayoutSupportKHR ) // VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDrawIndirectCountKHR ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDrawIndexedIndirectCountKHR ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetSemaphoreCounterValueKHR ) // VkDevice device, VkSemaphore semaphore, uint64_t* pValue
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkWaitSemaphoresKHR ) // VkDevice device, const VkSemaphoreWaitInfoKHR* pWaitInfo, uint64_t timeout
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkSignalSemaphoreKHR ) // VkDevice device, const VkSemaphoreSignalInfoKHR* pSignalInfo
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPipelineExecutablePropertiesKHR ) // VkDevice                        device, const VkPipelineInfoKHR*        pPipelineInfo, uint32_t* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPipelineExecutableStatisticsKHR ) // VkDevice                        device, const VkPipelineExecutableInfoKHR*  pExecutableInfo, uint32_t* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPipelineExecutableInternalRepresentationsKHR ) // VkDevice                        device, const VkPipelineExecutableInfoKHR*  pExecutableInfo, uint32_t* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkDebugMarkerSetObjectTagEXT ) // VkDevice device, const VkDebugMarkerObjectTagInfoEXT* pTagInfo
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkDebugMarkerSetObjectNameEXT ) // VkDevice device, const VkDebugMarkerObjectNameInfoEXT* pNameInfo
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDebugMarkerBeginEXT ) // VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDebugMarkerEndEXT ) // VkCommandBuffer commandBuffer
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDebugMarkerInsertEXT ) // VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdBindTransformFeedbackBuffersEXT ) // VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdBeginTransformFeedbackEXT ) // VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer* pCounterBuffers, const VkDeviceSize* pCounterBufferOffsets
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdEndTransformFeedbackEXT ) // VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer* pCounterBuffers, const VkDeviceSize* pCounterBufferOffsets
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdBeginQueryIndexedEXT ) // VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdEndQueryIndexedEXT ) // VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDrawIndirectByteCountEXT ) // VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDrawIndirectCountAMD ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDrawIndexedIndirectCountAMD ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetShaderInfoAMD ) // VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t* pInfoSize, void* pInfo
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdBeginConditionalRenderingEXT ) // VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdEndConditionalRenderingEXT ) // VkCommandBuffer commandBuffer
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdProcessCommandsNVX ) // VkCommandBuffer commandBuffer, const VkCmdProcessCommandsInfoNVX* pProcessCommandsInfo
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdReserveSpaceForCommandsNVX ) // VkCommandBuffer commandBuffer, const VkCmdReserveSpaceForCommandsInfoNVX* pReserveSpaceInfo
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateIndirectCommandsLayoutNVX ) // VkDevice device, const VkIndirectCommandsLayoutCreateInfoNVX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutNVX* pIndirectCommandsLayout
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyIndirectCommandsLayoutNVX ) // VkDevice device, VkIndirectCommandsLayoutNVX indirectCommandsLayout, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateObjectTableNVX ) // VkDevice device, const VkObjectTableCreateInfoNVX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkObjectTableNVX* pObjectTable
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyObjectTableNVX ) // VkDevice device, VkObjectTableNVX objectTable, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkRegisterObjectsNVX ) // VkDevice device, VkObjectTableNVX objectTable, uint32_t objectCount, const VkObjectTableEntryNVX* const*    ppObjectTableEntries, const uint32_t* pObjectIndices
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkUnregisterObjectsNVX ) // VkDevice device, VkObjectTableNVX objectTable, uint32_t objectCount, const VkObjectEntryTypeNVX* pObjectEntryTypes, const uint32_t* pObjectIndices
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetViewportWScalingNV ) // VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportWScalingNV* pViewportWScalings
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkDisplayPowerControlEXT ) // VkDevice device, VkDisplayKHR display, const VkDisplayPowerInfoEXT* pDisplayPowerInfo
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkRegisterDeviceEventEXT ) // VkDevice device, const VkDeviceEventInfoEXT* pDeviceEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkRegisterDisplayEventEXT ) // VkDevice device, VkDisplayKHR display, const VkDisplayEventInfoEXT* pDisplayEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetSwapchainCounterEXT ) // VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t* pCounterValue
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetRefreshCycleDurationGOOGLE ) // VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPastPresentationTimingGOOGLE ) // VkDevice device, VkSwapchainKHR swapchain, uint32_t* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetDiscardRectangleEXT ) // VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const VkRect2D* pDiscardRectangles
		/* void */ DEF_XVK_INTERFACE_FUNC( vkSetHdrMetadataEXT ) // VkDevice device, uint32_t swapchainCount, const VkSwapchainKHR* pSwapchains, const VkHdrMetadataEXT* pMetadata
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkSetDebugUtilsObjectNameEXT ) // VkDevice device, const VkDebugUtilsObjectNameInfoEXT* pNameInfo
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkSetDebugUtilsObjectTagEXT ) // VkDevice device, const VkDebugUtilsObjectTagInfoEXT* pTagInfo
		/* void */ DEF_XVK_INTERFACE_FUNC( vkQueueBeginDebugUtilsLabelEXT ) // VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo
		/* void */ DEF_XVK_INTERFACE_FUNC( vkQueueEndDebugUtilsLabelEXT ) // VkQueue queue
		/* void */ DEF_XVK_INTERFACE_FUNC( vkQueueInsertDebugUtilsLabelEXT ) // VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdBeginDebugUtilsLabelEXT ) // VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdEndDebugUtilsLabelEXT ) // VkCommandBuffer commandBuffer
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdInsertDebugUtilsLabelEXT ) // VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetSampleLocationsEXT ) // VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT* pSampleLocationsInfo
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetImageDrmFormatModifierPropertiesEXT ) // VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT* pProperties
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateValidationCacheEXT ) // VkDevice device, const VkValidationCacheCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkValidationCacheEXT* pValidationCache
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyValidationCacheEXT ) // VkDevice device, VkValidationCacheEXT validationCache, const VkAllocationCallbacks* pAllocator
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkMergeValidationCachesEXT ) // VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount, const VkValidationCacheEXT* pSrcCaches
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetValidationCacheDataEXT ) // VkDevice device, VkValidationCacheEXT validationCache, size_t* pDataSize, void* pData
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdBindShadingRateImageNV ) // VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetViewportShadingRatePaletteNV ) // VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkShadingRatePaletteNV* pShadingRatePalettes
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetCoarseSampleOrderNV ) // VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const VkCoarseSampleOrderCustomNV* pCustomSampleOrders
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateAccelerationStructureNV ) // VkDevice device, const VkAccelerationStructureCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkAccelerationStructureNV* pAccelerationStructure
		/* void */ DEF_XVK_INTERFACE_FUNC( vkDestroyAccelerationStructureNV ) // VkDevice device, VkAccelerationStructureNV accelerationStructure, const VkAllocationCallbacks* pAllocator
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetAccelerationStructureMemoryRequirementsNV ) // VkDevice device, const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkBindAccelerationStructureMemoryNV ) // VkDevice device, uint32_t bindInfoCount, const VkBindAccelerationStructureMemoryInfoNV* pBindInfos
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdBuildAccelerationStructureNV ) // VkCommandBuffer commandBuffer, const VkAccelerationStructureInfoNV* pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdCopyAccelerationStructureNV ) // VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeNV mode
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdTraceRaysNV ) // VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCreateRayTracingPipelinesNV ) // VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoNV* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetRayTracingShaderGroupHandlesNV ) // VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetAccelerationStructureHandleNV ) // VkDevice device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, void* pData
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdWriteAccelerationStructuresPropertiesNV ) // VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureNV* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCompileDeferredNV ) // VkDevice device, VkPipeline pipeline, uint32_t shader
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetMemoryHostPointerPropertiesEXT ) // VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const void* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdWriteBufferMarkerAMD ) // VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetCalibratedTimestampsEXT ) // VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoEXT* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDrawMeshTasksNV ) // VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDrawMeshTasksIndirectNV ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdDrawMeshTasksIndirectCountNV ) // VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetExclusiveScissorNV ) // VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkRect2D* pExclusiveScissors
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetCheckpointNV ) // VkCommandBuffer commandBuffer, const void* pCheckpointMarker
		/* void */ DEF_XVK_INTERFACE_FUNC( vkGetQueueCheckpointDataNV ) // VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkInitializePerformanceApiINTEL ) // VkDevice device, const VkInitializePerformanceApiInfoINTEL* pInitializeInfo
		/* void */ DEF_XVK_INTERFACE_FUNC( vkUninitializePerformanceApiINTEL ) // VkDevice device
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCmdSetPerformanceMarkerINTEL ) // VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL* pMarkerInfo
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCmdSetPerformanceStreamMarkerINTEL ) // VkCommandBuffer commandBuffer, const VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkCmdSetPerformanceOverrideINTEL ) // VkCommandBuffer commandBuffer, const VkPerformanceOverrideInfoINTEL* pOverrideInfo
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkAcquirePerformanceConfigurationINTEL ) // VkDevice device, const VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, VkPerformanceConfigurationINTEL* pConfiguration
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkReleasePerformanceConfigurationINTEL ) // VkDevice device, VkPerformanceConfigurationINTEL configuration
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkQueueSetPerformanceConfigurationINTEL ) // VkQueue queue, VkPerformanceConfigurationINTEL configuration
		/* VkResult */ DEF_XVK_INTERFACE_FUNC( vkGetPerformanceParameterINTEL ) // VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue
		/* void */ DEF_XVK_INTERFACE_FUNC( vkSetLocalDimmingAMD ) // VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable
		/* void */ DEF_XVK_INTERFACE_FUNC( vkCmdSetLineStippleEXT ) // VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern
		/* void */ DEF_XVK_INTERFACE_FUNC( vkResetQueryPoolEXT ) // VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount

		inline void DestroyDevice (const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyDevice)
			vkDestroyDevice(handle, pAllocator);
		}

		inline void GetDeviceQueue (uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue) {
			XVK_CHECK_FUNC(vkGetDeviceQueue)
			vkGetDeviceQueue(handle, queueFamilyIndex, queueIndex, pQueue);
		}

		inline VkResult QueueSubmit (VkQueue queue, uint32_t submitCount, const VkSubmitInfo* pSubmits, VkFence fence) {
			XVK_CHECK_FUNC(vkQueueSubmit)
			return vkQueueSubmit(queue, submitCount, pSubmits, fence);
		}

		inline VkResult QueueWaitIdle (VkQueue queue) {
			XVK_CHECK_FUNC(vkQueueWaitIdle)
			return vkQueueWaitIdle(queue);
		}

		inline VkResult DeviceWaitIdle (VkDevice device) {
			XVK_CHECK_FUNC(vkDeviceWaitIdle)
			return vkDeviceWaitIdle(device);
		}

		inline VkResult AllocateMemory (const VkMemoryAllocateInfo* pAllocateInfo, const VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory) {
			XVK_CHECK_FUNC(vkAllocateMemory)
			return vkAllocateMemory(handle, pAllocateInfo, pAllocator, pMemory);
		}

		inline void FreeMemory (VkDeviceMemory memory, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkFreeMemory)
			vkFreeMemory(handle, memory, pAllocator);
		}

		inline VkResult MapMemory (VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData) {
			XVK_CHECK_FUNC(vkMapMemory)
			return vkMapMemory(handle, memory, offset, size, flags, ppData);
		}

		inline void UnmapMemory (VkDeviceMemory memory) {
			XVK_CHECK_FUNC(vkUnmapMemory)
			vkUnmapMemory(handle, memory);
		}

		inline VkResult FlushMappedMemoryRanges (uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges) {
			XVK_CHECK_FUNC(vkFlushMappedMemoryRanges)
			return vkFlushMappedMemoryRanges(handle, memoryRangeCount, pMemoryRanges);
		}

		inline VkResult InvalidateMappedMemoryRanges (uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges) {
			XVK_CHECK_FUNC(vkInvalidateMappedMemoryRanges)
			return vkInvalidateMappedMemoryRanges(handle, memoryRangeCount, pMemoryRanges);
		}

		inline void GetDeviceMemoryCommitment (VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes) {
			XVK_CHECK_FUNC(vkGetDeviceMemoryCommitment)
			vkGetDeviceMemoryCommitment(handle, memory, pCommittedMemoryInBytes);
		}

		inline VkResult BindBufferMemory (VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset) {
			XVK_CHECK_FUNC(vkBindBufferMemory)
			return vkBindBufferMemory(handle, buffer, memory, memoryOffset);
		}

		inline VkResult BindImageMemory (VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset) {
			XVK_CHECK_FUNC(vkBindImageMemory)
			return vkBindImageMemory(handle, image, memory, memoryOffset);
		}

		inline void GetBufferMemoryRequirements (VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements) {
			XVK_CHECK_FUNC(vkGetBufferMemoryRequirements)
			vkGetBufferMemoryRequirements(handle, buffer, pMemoryRequirements);
		}

		inline void GetImageMemoryRequirements (VkImage image, VkMemoryRequirements* pMemoryRequirements) {
			XVK_CHECK_FUNC(vkGetImageMemoryRequirements)
			vkGetImageMemoryRequirements(handle, image, pMemoryRequirements);
		}

		inline void GetImageSparseMemoryRequirements (VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements) {
			XVK_CHECK_FUNC(vkGetImageSparseMemoryRequirements)
			vkGetImageSparseMemoryRequirements(handle, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
		}

		inline VkResult QueueBindSparse (VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo* pBindInfo, VkFence fence) {
			XVK_CHECK_FUNC(vkQueueBindSparse)
			return vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence);
		}

		inline VkResult CreateFence (const VkFenceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence) {
			XVK_CHECK_FUNC(vkCreateFence)
			return vkCreateFence(handle, pCreateInfo, pAllocator, pFence);
		}

		inline void DestroyFence (VkFence fence, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyFence)
			vkDestroyFence(handle, fence, pAllocator);
		}

		inline VkResult ResetFences (uint32_t fenceCount, const VkFence* pFences) {
			XVK_CHECK_FUNC(vkResetFences)
			return vkResetFences(handle, fenceCount, pFences);
		}

		inline VkResult GetFenceStatus (VkFence fence) {
			XVK_CHECK_FUNC(vkGetFenceStatus)
			return vkGetFenceStatus(handle, fence);
		}

		inline VkResult WaitForFences (uint32_t fenceCount, const VkFence* pFences, VkBool32 waitAll, uint64_t timeout) {
			XVK_CHECK_FUNC(vkWaitForFences)
			return vkWaitForFences(handle, fenceCount, pFences, waitAll, timeout);
		}

		inline VkResult CreateSemaphore (const VkSemaphoreCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore) {
			XVK_CHECK_FUNC(vkCreateSemaphore)
			return vkCreateSemaphore(handle, pCreateInfo, pAllocator, pSemaphore);
		}

		inline void DestroySemaphore (VkSemaphore semaphore, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroySemaphore)
			vkDestroySemaphore(handle, semaphore, pAllocator);
		}

		inline VkResult CreateEvent (const VkEventCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkEvent* pEvent) {
			XVK_CHECK_FUNC(vkCreateEvent)
			return vkCreateEvent(handle, pCreateInfo, pAllocator, pEvent);
		}

		inline void DestroyEvent (VkEvent event, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyEvent)
			vkDestroyEvent(handle, event, pAllocator);
		}

		inline VkResult GetEventStatus (VkEvent event) {
			XVK_CHECK_FUNC(vkGetEventStatus)
			return vkGetEventStatus(handle, event);
		}

		inline VkResult SetEvent (VkEvent event) {
			XVK_CHECK_FUNC(vkSetEvent)
			return vkSetEvent(handle, event);
		}

		inline VkResult ResetEvent (VkEvent event) {
			XVK_CHECK_FUNC(vkResetEvent)
			return vkResetEvent(handle, event);
		}

		inline VkResult CreateQueryPool (const VkQueryPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool) {
			XVK_CHECK_FUNC(vkCreateQueryPool)
			return vkCreateQueryPool(handle, pCreateInfo, pAllocator, pQueryPool);
		}

		inline void DestroyQueryPool (VkQueryPool queryPool, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyQueryPool)
			vkDestroyQueryPool(handle, queryPool, pAllocator);
		}

		inline VkResult GetQueryPoolResults (VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags) {
			XVK_CHECK_FUNC(vkGetQueryPoolResults)
			return vkGetQueryPoolResults(handle, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
		}

		inline VkResult CreateBuffer (const VkBufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer) {
			XVK_CHECK_FUNC(vkCreateBuffer)
			return vkCreateBuffer(handle, pCreateInfo, pAllocator, pBuffer);
		}

		inline void DestroyBuffer (VkBuffer buffer, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyBuffer)
			vkDestroyBuffer(handle, buffer, pAllocator);
		}

		inline VkResult CreateBufferView (const VkBufferViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferView* pView) {
			XVK_CHECK_FUNC(vkCreateBufferView)
			return vkCreateBufferView(handle, pCreateInfo, pAllocator, pView);
		}

		inline void DestroyBufferView (VkBufferView bufferView, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyBufferView)
			vkDestroyBufferView(handle, bufferView, pAllocator);
		}

		inline VkResult CreateImage (const VkImageCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImage* pImage) {
			XVK_CHECK_FUNC(vkCreateImage)
			return vkCreateImage(handle, pCreateInfo, pAllocator, pImage);
		}

		inline void DestroyImage (VkImage image, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyImage)
			vkDestroyImage(handle, image, pAllocator);
		}

		inline void GetImageSubresourceLayout (VkImage image, const VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout) {
			XVK_CHECK_FUNC(vkGetImageSubresourceLayout)
			vkGetImageSubresourceLayout(handle, image, pSubresource, pLayout);
		}

		inline VkResult CreateImageView (const VkImageViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImageView* pView) {
			XVK_CHECK_FUNC(vkCreateImageView)
			return vkCreateImageView(handle, pCreateInfo, pAllocator, pView);
		}

		inline void DestroyImageView (VkImageView imageView, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyImageView)
			vkDestroyImageView(handle, imageView, pAllocator);
		}

		inline VkResult CreateShaderModule (const VkShaderModuleCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule) {
			XVK_CHECK_FUNC(vkCreateShaderModule)
			return vkCreateShaderModule(handle, pCreateInfo, pAllocator, pShaderModule);
		}

		inline void DestroyShaderModule (VkShaderModule shaderModule, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyShaderModule)
			vkDestroyShaderModule(handle, shaderModule, pAllocator);
		}

		inline VkResult CreatePipelineCache (const VkPipelineCacheCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache) {
			XVK_CHECK_FUNC(vkCreatePipelineCache)
			return vkCreatePipelineCache(handle, pCreateInfo, pAllocator, pPipelineCache);
		}

		inline void DestroyPipelineCache (VkPipelineCache pipelineCache, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyPipelineCache)
			vkDestroyPipelineCache(handle, pipelineCache, pAllocator);
		}

		inline VkResult GetPipelineCacheData (VkPipelineCache pipelineCache, size_t* pDataSize, void* pData) {
			XVK_CHECK_FUNC(vkGetPipelineCacheData)
			return vkGetPipelineCacheData(handle, pipelineCache, pDataSize, pData);
		}

		inline VkResult MergePipelineCaches (VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache* pSrcCaches) {
			XVK_CHECK_FUNC(vkMergePipelineCaches)
			return vkMergePipelineCaches(handle, dstCache, srcCacheCount, pSrcCaches);
		}

		inline VkResult CreateGraphicsPipelines (VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
			XVK_CHECK_FUNC(vkCreateGraphicsPipelines)
			return vkCreateGraphicsPipelines(handle, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
		}

		inline VkResult CreateComputePipelines (VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
			XVK_CHECK_FUNC(vkCreateComputePipelines)
			return vkCreateComputePipelines(handle, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
		}

		inline void DestroyPipeline (VkPipeline pipeline, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyPipeline)
			vkDestroyPipeline(handle, pipeline, pAllocator);
		}

		inline VkResult CreatePipelineLayout (const VkPipelineLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout) {
			XVK_CHECK_FUNC(vkCreatePipelineLayout)
			return vkCreatePipelineLayout(handle, pCreateInfo, pAllocator, pPipelineLayout);
		}

		inline void DestroyPipelineLayout (VkPipelineLayout pipelineLayout, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyPipelineLayout)
			vkDestroyPipelineLayout(handle, pipelineLayout, pAllocator);
		}

		inline VkResult CreateSampler (const VkSamplerCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSampler* pSampler) {
			XVK_CHECK_FUNC(vkCreateSampler)
			return vkCreateSampler(handle, pCreateInfo, pAllocator, pSampler);
		}

		inline void DestroySampler (VkSampler sampler, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroySampler)
			vkDestroySampler(handle, sampler, pAllocator);
		}

		inline VkResult CreateDescriptorSetLayout (const VkDescriptorSetLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout) {
			XVK_CHECK_FUNC(vkCreateDescriptorSetLayout)
			return vkCreateDescriptorSetLayout(handle, pCreateInfo, pAllocator, pSetLayout);
		}

		inline void DestroyDescriptorSetLayout (VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyDescriptorSetLayout)
			vkDestroyDescriptorSetLayout(handle, descriptorSetLayout, pAllocator);
		}

		inline VkResult CreateDescriptorPool (const VkDescriptorPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool) {
			XVK_CHECK_FUNC(vkCreateDescriptorPool)
			return vkCreateDescriptorPool(handle, pCreateInfo, pAllocator, pDescriptorPool);
		}

		inline void DestroyDescriptorPool (VkDescriptorPool descriptorPool, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyDescriptorPool)
			vkDestroyDescriptorPool(handle, descriptorPool, pAllocator);
		}

		inline VkResult ResetDescriptorPool (VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags) {
			XVK_CHECK_FUNC(vkResetDescriptorPool)
			return vkResetDescriptorPool(handle, descriptorPool, flags);
		}

		inline VkResult AllocateDescriptorSets (const VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets) {
			XVK_CHECK_FUNC(vkAllocateDescriptorSets)
			return vkAllocateDescriptorSets(handle, pAllocateInfo, pDescriptorSets);
		}

		inline VkResult FreeDescriptorSets (VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets) {
			XVK_CHECK_FUNC(vkFreeDescriptorSets)
			return vkFreeDescriptorSets(handle, descriptorPool, descriptorSetCount, pDescriptorSets);
		}

		inline void UpdateDescriptorSets (uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet* pDescriptorCopies) {
			XVK_CHECK_FUNC(vkUpdateDescriptorSets)
			vkUpdateDescriptorSets(handle, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
		}

		inline VkResult CreateFramebuffer (const VkFramebufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer) {
			XVK_CHECK_FUNC(vkCreateFramebuffer)
			return vkCreateFramebuffer(handle, pCreateInfo, pAllocator, pFramebuffer);
		}

		inline void DestroyFramebuffer (VkFramebuffer framebuffer, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyFramebuffer)
			vkDestroyFramebuffer(handle, framebuffer, pAllocator);
		}

		inline VkResult CreateRenderPass (const VkRenderPassCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) {
			XVK_CHECK_FUNC(vkCreateRenderPass)
			return vkCreateRenderPass(handle, pCreateInfo, pAllocator, pRenderPass);
		}

		inline void DestroyRenderPass (VkRenderPass renderPass, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyRenderPass)
			vkDestroyRenderPass(handle, renderPass, pAllocator);
		}

		inline void GetRenderAreaGranularity (VkRenderPass renderPass, VkExtent2D* pGranularity) {
			XVK_CHECK_FUNC(vkGetRenderAreaGranularity)
			vkGetRenderAreaGranularity(handle, renderPass, pGranularity);
		}

		inline VkResult CreateCommandPool (const VkCommandPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool) {
			XVK_CHECK_FUNC(vkCreateCommandPool)
			return vkCreateCommandPool(handle, pCreateInfo, pAllocator, pCommandPool);
		}

		inline void DestroyCommandPool (VkCommandPool commandPool, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyCommandPool)
			vkDestroyCommandPool(handle, commandPool, pAllocator);
		}

		inline VkResult ResetCommandPool (VkCommandPool commandPool, VkCommandPoolResetFlags flags) {
			XVK_CHECK_FUNC(vkResetCommandPool)
			return vkResetCommandPool(handle, commandPool, flags);
		}

		inline VkResult AllocateCommandBuffers (const VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers) {
			XVK_CHECK_FUNC(vkAllocateCommandBuffers)
			return vkAllocateCommandBuffers(handle, pAllocateInfo, pCommandBuffers);
		}

		inline void FreeCommandBuffers (VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers) {
			XVK_CHECK_FUNC(vkFreeCommandBuffers)
			vkFreeCommandBuffers(handle, commandPool, commandBufferCount, pCommandBuffers);
		}

		inline VkResult BeginCommandBuffer (VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo* pBeginInfo) {
			XVK_CHECK_FUNC(vkBeginCommandBuffer)
			return vkBeginCommandBuffer(commandBuffer, pBeginInfo);
		}

		inline VkResult EndCommandBuffer (VkCommandBuffer commandBuffer) {
			XVK_CHECK_FUNC(vkEndCommandBuffer)
			return vkEndCommandBuffer(commandBuffer);
		}

		inline VkResult ResetCommandBuffer (VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags) {
			XVK_CHECK_FUNC(vkResetCommandBuffer)
			return vkResetCommandBuffer(commandBuffer, flags);
		}

		inline void CmdBindPipeline (VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) {
			XVK_CHECK_FUNC(vkCmdBindPipeline)
			vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
		}

		inline void CmdSetViewport (VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports) {
			XVK_CHECK_FUNC(vkCmdSetViewport)
			vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
		}

		inline void CmdSetScissor (VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors) {
			XVK_CHECK_FUNC(vkCmdSetScissor)
			vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
		}

		inline void CmdSetLineWidth (VkCommandBuffer commandBuffer, float lineWidth) {
			XVK_CHECK_FUNC(vkCmdSetLineWidth)
			vkCmdSetLineWidth(commandBuffer, lineWidth);
		}

		inline void CmdSetDepthBias (VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) {
			XVK_CHECK_FUNC(vkCmdSetDepthBias)
			vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
		}

		inline void CmdSetBlendConstants (VkCommandBuffer commandBuffer, const float blendConstants[4]) {
			XVK_CHECK_FUNC(vkCmdSetBlendConstants)
			vkCmdSetBlendConstants(commandBuffer, blendConstants);
		}

		inline void CmdSetDepthBounds (VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds) {
			XVK_CHECK_FUNC(vkCmdSetDepthBounds)
			vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
		}

		inline void CmdSetStencilCompareMask (VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask) {
			XVK_CHECK_FUNC(vkCmdSetStencilCompareMask)
			vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
		}

		inline void CmdSetStencilWriteMask (VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask) {
			XVK_CHECK_FUNC(vkCmdSetStencilWriteMask)
			vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
		}

		inline void CmdSetStencilReference (VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference) {
			XVK_CHECK_FUNC(vkCmdSetStencilReference)
			vkCmdSetStencilReference(commandBuffer, faceMask, reference);
		}

		inline void CmdBindDescriptorSets (VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets) {
			XVK_CHECK_FUNC(vkCmdBindDescriptorSets)
			vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
		}

		inline void CmdBindIndexBuffer (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType) {
			XVK_CHECK_FUNC(vkCmdBindIndexBuffer)
			vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
		}

		inline void CmdBindVertexBuffers (VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets) {
			XVK_CHECK_FUNC(vkCmdBindVertexBuffers)
			vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
		}

		inline void CmdDraw (VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {
			XVK_CHECK_FUNC(vkCmdDraw)
			vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
		}

		inline void CmdDrawIndexed (VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance) {
			XVK_CHECK_FUNC(vkCmdDrawIndexed)
			vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
		}

		inline void CmdDrawIndirect (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
			XVK_CHECK_FUNC(vkCmdDrawIndirect)
			vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
		}

		inline void CmdDrawIndexedIndirect (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
			XVK_CHECK_FUNC(vkCmdDrawIndexedIndirect)
			vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
		}

		inline void CmdDispatch (VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) {
			XVK_CHECK_FUNC(vkCmdDispatch)
			vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
		}

		inline void CmdDispatchIndirect (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) {
			XVK_CHECK_FUNC(vkCmdDispatchIndirect)
			vkCmdDispatchIndirect(commandBuffer, buffer, offset);
		}

		inline void CmdCopyBuffer (VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions) {
			XVK_CHECK_FUNC(vkCmdCopyBuffer)
			vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
		}

		inline void CmdCopyImage (VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions) {
			XVK_CHECK_FUNC(vkCmdCopyImage)
			vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
		}

		inline void CmdBlitImage (VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter) {
			XVK_CHECK_FUNC(vkCmdBlitImage)
			vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
		}

		inline void CmdCopyBufferToImage (VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions) {
			XVK_CHECK_FUNC(vkCmdCopyBufferToImage)
			vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
		}

		inline void CmdCopyImageToBuffer (VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions) {
			XVK_CHECK_FUNC(vkCmdCopyImageToBuffer)
			vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
		}

		inline void CmdUpdateBuffer (VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void* pData) {
			XVK_CHECK_FUNC(vkCmdUpdateBuffer)
			vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
		}

		inline void CmdFillBuffer (VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data) {
			XVK_CHECK_FUNC(vkCmdFillBuffer)
			vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
		}

		inline void CmdClearColorImage (VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges) {
			XVK_CHECK_FUNC(vkCmdClearColorImage)
			vkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
		}

		inline void CmdClearDepthStencilImage (VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges) {
			XVK_CHECK_FUNC(vkCmdClearDepthStencilImage)
			vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
		}

		inline void CmdClearAttachments (VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects) {
			XVK_CHECK_FUNC(vkCmdClearAttachments)
			vkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
		}

		inline void CmdResolveImage (VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions) {
			XVK_CHECK_FUNC(vkCmdResolveImage)
			vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
		}

		inline void CmdSetEvent (VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) {
			XVK_CHECK_FUNC(vkCmdSetEvent)
			vkCmdSetEvent(commandBuffer, event, stageMask);
		}

		inline void CmdResetEvent (VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) {
			XVK_CHECK_FUNC(vkCmdResetEvent)
			vkCmdResetEvent(commandBuffer, event, stageMask);
		}

		inline void CmdWaitEvents (VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers) {
			XVK_CHECK_FUNC(vkCmdWaitEvents)
			vkCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
		}

		inline void CmdPipelineBarrier (VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers) {
			XVK_CHECK_FUNC(vkCmdPipelineBarrier)
			vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
		}

		inline void CmdBeginQuery (VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags) {
			XVK_CHECK_FUNC(vkCmdBeginQuery)
			vkCmdBeginQuery(commandBuffer, queryPool, query, flags);
		}

		inline void CmdEndQuery (VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query) {
			XVK_CHECK_FUNC(vkCmdEndQuery)
			vkCmdEndQuery(commandBuffer, queryPool, query);
		}

		inline void CmdResetQueryPool (VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) {
			XVK_CHECK_FUNC(vkCmdResetQueryPool)
			vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
		}

		inline void CmdWriteTimestamp (VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query) {
			XVK_CHECK_FUNC(vkCmdWriteTimestamp)
			vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
		}

		inline void CmdCopyQueryPoolResults (VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags) {
			XVK_CHECK_FUNC(vkCmdCopyQueryPoolResults)
			vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
		}

		inline void CmdPushConstants (VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues) {
			XVK_CHECK_FUNC(vkCmdPushConstants)
			vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
		}

		inline void CmdBeginRenderPass (VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents) {
			XVK_CHECK_FUNC(vkCmdBeginRenderPass)
			vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
		}

		inline void CmdNextSubpass (VkCommandBuffer commandBuffer, VkSubpassContents contents) {
			XVK_CHECK_FUNC(vkCmdNextSubpass)
			vkCmdNextSubpass(commandBuffer, contents);
		}

		inline void CmdEndRenderPass (VkCommandBuffer commandBuffer) {
			XVK_CHECK_FUNC(vkCmdEndRenderPass)
			vkCmdEndRenderPass(commandBuffer);
		}

		inline void CmdExecuteCommands (VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers) {
			XVK_CHECK_FUNC(vkCmdExecuteCommands)
			vkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
		}

		inline VkResult BindBufferMemory2 (uint32_t bindInfoCount, const VkBindBufferMemoryInfo* pBindInfos) {
			XVK_CHECK_FUNC(vkBindBufferMemory2)
			return vkBindBufferMemory2(handle, bindInfoCount, pBindInfos);
		}

		inline VkResult BindImageMemory2 (uint32_t bindInfoCount, const VkBindImageMemoryInfo* pBindInfos) {
			XVK_CHECK_FUNC(vkBindImageMemory2)
			return vkBindImageMemory2(handle, bindInfoCount, pBindInfos);
		}

		inline void GetDeviceGroupPeerMemoryFeatures (uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures) {
			XVK_CHECK_FUNC(vkGetDeviceGroupPeerMemoryFeatures)
			vkGetDeviceGroupPeerMemoryFeatures(handle, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
		}

		inline void CmdSetDeviceMask (VkCommandBuffer commandBuffer, uint32_t deviceMask) {
			XVK_CHECK_FUNC(vkCmdSetDeviceMask)
			vkCmdSetDeviceMask(commandBuffer, deviceMask);
		}

		inline void CmdDispatchBase (VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) {
			XVK_CHECK_FUNC(vkCmdDispatchBase)
			vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
		}

		inline void GetImageMemoryRequirements2 (const VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements) {
			XVK_CHECK_FUNC(vkGetImageMemoryRequirements2)
			vkGetImageMemoryRequirements2(handle, pInfo, pMemoryRequirements);
		}

		inline void GetBufferMemoryRequirements2 (const VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements) {
			XVK_CHECK_FUNC(vkGetBufferMemoryRequirements2)
			vkGetBufferMemoryRequirements2(handle, pInfo, pMemoryRequirements);
		}

		inline void GetImageSparseMemoryRequirements2 (const VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements) {
			XVK_CHECK_FUNC(vkGetImageSparseMemoryRequirements2)
			vkGetImageSparseMemoryRequirements2(handle, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
		}

		inline void TrimCommandPool (VkCommandPool commandPool, VkCommandPoolTrimFlags flags) {
			XVK_CHECK_FUNC(vkTrimCommandPool)
			vkTrimCommandPool(handle, commandPool, flags);
		}

		inline void GetDeviceQueue2 (const VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue) {
			XVK_CHECK_FUNC(vkGetDeviceQueue2)
			vkGetDeviceQueue2(handle, pQueueInfo, pQueue);
		}

		inline VkResult CreateSamplerYcbcrConversion (const VkSamplerYcbcrConversionCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion) {
			XVK_CHECK_FUNC(vkCreateSamplerYcbcrConversion)
			return vkCreateSamplerYcbcrConversion(handle, pCreateInfo, pAllocator, pYcbcrConversion);
		}

		inline void DestroySamplerYcbcrConversion (VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroySamplerYcbcrConversion)
			vkDestroySamplerYcbcrConversion(handle, ycbcrConversion, pAllocator);
		}

		inline VkResult CreateDescriptorUpdateTemplate (const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate) {
			XVK_CHECK_FUNC(vkCreateDescriptorUpdateTemplate)
			return vkCreateDescriptorUpdateTemplate(handle, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
		}

		inline void DestroyDescriptorUpdateTemplate (VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyDescriptorUpdateTemplate)
			vkDestroyDescriptorUpdateTemplate(handle, descriptorUpdateTemplate, pAllocator);
		}

		inline void UpdateDescriptorSetWithTemplate (VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void* pData) {
			XVK_CHECK_FUNC(vkUpdateDescriptorSetWithTemplate)
			vkUpdateDescriptorSetWithTemplate(handle, descriptorSet, descriptorUpdateTemplate, pData);
		}

		inline void GetDescriptorSetLayoutSupport (const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport) {
			XVK_CHECK_FUNC(vkGetDescriptorSetLayoutSupport)
			vkGetDescriptorSetLayoutSupport(handle, pCreateInfo, pSupport);
		}

		inline VkResult CreateSwapchainKHR (const VkSwapchainCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain) {
			XVK_CHECK_FUNC(vkCreateSwapchainKHR)
			return vkCreateSwapchainKHR(handle, pCreateInfo, pAllocator, pSwapchain);
		}

		inline void DestroySwapchainKHR (VkSwapchainKHR swapchain, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroySwapchainKHR)
			vkDestroySwapchainKHR(handle, swapchain, pAllocator);
		}

		inline VkResult GetSwapchainImagesKHR (VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages) {
			XVK_CHECK_FUNC(vkGetSwapchainImagesKHR)
			return vkGetSwapchainImagesKHR(handle, swapchain, pSwapchainImageCount, pSwapchainImages);
		}

		inline VkResult AcquireNextImageKHR (VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex) {
			XVK_CHECK_FUNC(vkAcquireNextImageKHR)
			return vkAcquireNextImageKHR(handle, swapchain, timeout, semaphore, fence, pImageIndex);
		}

		inline VkResult QueuePresentKHR (VkQueue queue, const VkPresentInfoKHR* pPresentInfo) {
			XVK_CHECK_FUNC(vkQueuePresentKHR)
			return vkQueuePresentKHR(queue, pPresentInfo);
		}

		inline VkResult GetDeviceGroupPresentCapabilitiesKHR (VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities) {
			XVK_CHECK_FUNC(vkGetDeviceGroupPresentCapabilitiesKHR)
			return vkGetDeviceGroupPresentCapabilitiesKHR(handle, pDeviceGroupPresentCapabilities);
		}

		inline VkResult GetDeviceGroupSurfacePresentModesKHR (VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* pModes) {
			XVK_CHECK_FUNC(vkGetDeviceGroupSurfacePresentModesKHR)
			return vkGetDeviceGroupSurfacePresentModesKHR(handle, surface, pModes);
		}

		inline VkResult AcquireNextImage2KHR (const VkAcquireNextImageInfoKHR* pAcquireInfo, uint32_t* pImageIndex) {
			XVK_CHECK_FUNC(vkAcquireNextImage2KHR)
			return vkAcquireNextImage2KHR(handle, pAcquireInfo, pImageIndex);
		}

		inline VkResult CreateSharedSwapchainsKHR (uint32_t swapchainCount, const VkSwapchainCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains) {
			XVK_CHECK_FUNC(vkCreateSharedSwapchainsKHR)
			return vkCreateSharedSwapchainsKHR(handle, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
		}

		inline void GetDeviceGroupPeerMemoryFeaturesKHR (uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures) {
			XVK_CHECK_FUNC(vkGetDeviceGroupPeerMemoryFeaturesKHR)
			vkGetDeviceGroupPeerMemoryFeaturesKHR(handle, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
		}

		inline void CmdSetDeviceMaskKHR (VkCommandBuffer commandBuffer, uint32_t deviceMask) {
			XVK_CHECK_FUNC(vkCmdSetDeviceMaskKHR)
			vkCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
		}

		inline void CmdDispatchBaseKHR (VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) {
			XVK_CHECK_FUNC(vkCmdDispatchBaseKHR)
			vkCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
		}

		inline void TrimCommandPoolKHR (VkCommandPool commandPool, VkCommandPoolTrimFlags flags) {
			XVK_CHECK_FUNC(vkTrimCommandPoolKHR)
			vkTrimCommandPoolKHR(handle, commandPool, flags);
		}

		inline VkResult GetMemoryFdKHR (const VkMemoryGetFdInfoKHR* pGetFdInfo, int* pFd) {
			XVK_CHECK_FUNC(vkGetMemoryFdKHR)
			return vkGetMemoryFdKHR(handle, pGetFdInfo, pFd);
		}

		inline VkResult GetMemoryFdPropertiesKHR (VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties) {
			XVK_CHECK_FUNC(vkGetMemoryFdPropertiesKHR)
			return vkGetMemoryFdPropertiesKHR(handle, handleType, fd, pMemoryFdProperties);
		}

		inline VkResult ImportSemaphoreFdKHR (const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo) {
			XVK_CHECK_FUNC(vkImportSemaphoreFdKHR)
			return vkImportSemaphoreFdKHR(handle, pImportSemaphoreFdInfo);
		}

		inline VkResult GetSemaphoreFdKHR (const VkSemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd) {
			XVK_CHECK_FUNC(vkGetSemaphoreFdKHR)
			return vkGetSemaphoreFdKHR(handle, pGetFdInfo, pFd);
		}

		inline void CmdPushDescriptorSetKHR (VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites) {
			XVK_CHECK_FUNC(vkCmdPushDescriptorSetKHR)
			vkCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
		}

		inline void CmdPushDescriptorSetWithTemplateKHR (VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void* pData) {
			XVK_CHECK_FUNC(vkCmdPushDescriptorSetWithTemplateKHR)
			vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
		}

		inline VkResult CreateDescriptorUpdateTemplateKHR (const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate) {
			XVK_CHECK_FUNC(vkCreateDescriptorUpdateTemplateKHR)
			return vkCreateDescriptorUpdateTemplateKHR(handle, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
		}

		inline void DestroyDescriptorUpdateTemplateKHR (VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyDescriptorUpdateTemplateKHR)
			vkDestroyDescriptorUpdateTemplateKHR(handle, descriptorUpdateTemplate, pAllocator);
		}

		inline void UpdateDescriptorSetWithTemplateKHR (VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void* pData) {
			XVK_CHECK_FUNC(vkUpdateDescriptorSetWithTemplateKHR)
			vkUpdateDescriptorSetWithTemplateKHR(handle, descriptorSet, descriptorUpdateTemplate, pData);
		}

		inline VkResult CreateRenderPass2KHR (const VkRenderPassCreateInfo2KHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) {
			XVK_CHECK_FUNC(vkCreateRenderPass2KHR)
			return vkCreateRenderPass2KHR(handle, pCreateInfo, pAllocator, pRenderPass);
		}

		inline void CmdBeginRenderPass2KHR (VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo*      pRenderPassBegin, const VkSubpassBeginInfoKHR*      pSubpassBeginInfo) {
			XVK_CHECK_FUNC(vkCmdBeginRenderPass2KHR)
			vkCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
		}

		inline void CmdNextSubpass2KHR (VkCommandBuffer commandBuffer, const VkSubpassBeginInfoKHR*      pSubpassBeginInfo, const VkSubpassEndInfoKHR*        pSubpassEndInfo) {
			XVK_CHECK_FUNC(vkCmdNextSubpass2KHR)
			vkCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
		}

		inline void CmdEndRenderPass2KHR (VkCommandBuffer commandBuffer, const VkSubpassEndInfoKHR*        pSubpassEndInfo) {
			XVK_CHECK_FUNC(vkCmdEndRenderPass2KHR)
			vkCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
		}

		inline VkResult GetSwapchainStatusKHR (VkSwapchainKHR swapchain) {
			XVK_CHECK_FUNC(vkGetSwapchainStatusKHR)
			return vkGetSwapchainStatusKHR(handle, swapchain);
		}

		inline VkResult ImportFenceFdKHR (const VkImportFenceFdInfoKHR* pImportFenceFdInfo) {
			XVK_CHECK_FUNC(vkImportFenceFdKHR)
			return vkImportFenceFdKHR(handle, pImportFenceFdInfo);
		}

		inline VkResult GetFenceFdKHR (const VkFenceGetFdInfoKHR* pGetFdInfo, int* pFd) {
			XVK_CHECK_FUNC(vkGetFenceFdKHR)
			return vkGetFenceFdKHR(handle, pGetFdInfo, pFd);
		}

		inline void GetImageMemoryRequirements2KHR (const VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements) {
			XVK_CHECK_FUNC(vkGetImageMemoryRequirements2KHR)
			vkGetImageMemoryRequirements2KHR(handle, pInfo, pMemoryRequirements);
		}

		inline void GetBufferMemoryRequirements2KHR (const VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements) {
			XVK_CHECK_FUNC(vkGetBufferMemoryRequirements2KHR)
			vkGetBufferMemoryRequirements2KHR(handle, pInfo, pMemoryRequirements);
		}

		inline void GetImageSparseMemoryRequirements2KHR (const VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements) {
			XVK_CHECK_FUNC(vkGetImageSparseMemoryRequirements2KHR)
			vkGetImageSparseMemoryRequirements2KHR(handle, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
		}

		inline VkResult CreateSamplerYcbcrConversionKHR (const VkSamplerYcbcrConversionCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion) {
			XVK_CHECK_FUNC(vkCreateSamplerYcbcrConversionKHR)
			return vkCreateSamplerYcbcrConversionKHR(handle, pCreateInfo, pAllocator, pYcbcrConversion);
		}

		inline void DestroySamplerYcbcrConversionKHR (VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroySamplerYcbcrConversionKHR)
			vkDestroySamplerYcbcrConversionKHR(handle, ycbcrConversion, pAllocator);
		}

		inline VkResult BindBufferMemory2KHR (uint32_t bindInfoCount, const VkBindBufferMemoryInfo* pBindInfos) {
			XVK_CHECK_FUNC(vkBindBufferMemory2KHR)
			return vkBindBufferMemory2KHR(handle, bindInfoCount, pBindInfos);
		}

		inline VkResult BindImageMemory2KHR (uint32_t bindInfoCount, const VkBindImageMemoryInfo* pBindInfos) {
			XVK_CHECK_FUNC(vkBindImageMemory2KHR)
			return vkBindImageMemory2KHR(handle, bindInfoCount, pBindInfos);
		}

		inline void GetDescriptorSetLayoutSupportKHR (const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport) {
			XVK_CHECK_FUNC(vkGetDescriptorSetLayoutSupportKHR)
			vkGetDescriptorSetLayoutSupportKHR(handle, pCreateInfo, pSupport);
		}

		inline void CmdDrawIndirectCountKHR (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
			XVK_CHECK_FUNC(vkCmdDrawIndirectCountKHR)
			vkCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
		}

		inline void CmdDrawIndexedIndirectCountKHR (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
			XVK_CHECK_FUNC(vkCmdDrawIndexedIndirectCountKHR)
			vkCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
		}

		inline VkResult GetSemaphoreCounterValueKHR (VkSemaphore semaphore, uint64_t* pValue) {
			XVK_CHECK_FUNC(vkGetSemaphoreCounterValueKHR)
			return vkGetSemaphoreCounterValueKHR(handle, semaphore, pValue);
		}

		inline VkResult WaitSemaphoresKHR (const VkSemaphoreWaitInfoKHR* pWaitInfo, uint64_t timeout) {
			XVK_CHECK_FUNC(vkWaitSemaphoresKHR)
			return vkWaitSemaphoresKHR(handle, pWaitInfo, timeout);
		}

		inline VkResult SignalSemaphoreKHR (const VkSemaphoreSignalInfoKHR* pSignalInfo) {
			XVK_CHECK_FUNC(vkSignalSemaphoreKHR)
			return vkSignalSemaphoreKHR(handle, pSignalInfo);
		}

		inline VkResult GetPipelineExecutablePropertiesKHR (const VkPipelineInfoKHR*        pPipelineInfo, uint32_t* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties) {
			XVK_CHECK_FUNC(vkGetPipelineExecutablePropertiesKHR)
			return vkGetPipelineExecutablePropertiesKHR(handle, pPipelineInfo, pExecutableCount, pProperties);
		}

		inline VkResult GetPipelineExecutableStatisticsKHR (const VkPipelineExecutableInfoKHR*  pExecutableInfo, uint32_t* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics) {
			XVK_CHECK_FUNC(vkGetPipelineExecutableStatisticsKHR)
			return vkGetPipelineExecutableStatisticsKHR(handle, pExecutableInfo, pStatisticCount, pStatistics);
		}

		inline VkResult GetPipelineExecutableInternalRepresentationsKHR (const VkPipelineExecutableInfoKHR*  pExecutableInfo, uint32_t* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations) {
			XVK_CHECK_FUNC(vkGetPipelineExecutableInternalRepresentationsKHR)
			return vkGetPipelineExecutableInternalRepresentationsKHR(handle, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
		}

		inline VkResult DebugMarkerSetObjectTagEXT (const VkDebugMarkerObjectTagInfoEXT* pTagInfo) {
			XVK_CHECK_FUNC(vkDebugMarkerSetObjectTagEXT)
			return vkDebugMarkerSetObjectTagEXT(handle, pTagInfo);
		}

		inline VkResult DebugMarkerSetObjectNameEXT (const VkDebugMarkerObjectNameInfoEXT* pNameInfo) {
			XVK_CHECK_FUNC(vkDebugMarkerSetObjectNameEXT)
			return vkDebugMarkerSetObjectNameEXT(handle, pNameInfo);
		}

		inline void CmdDebugMarkerBeginEXT (VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo) {
			XVK_CHECK_FUNC(vkCmdDebugMarkerBeginEXT)
			vkCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
		}

		inline void CmdDebugMarkerEndEXT (VkCommandBuffer commandBuffer) {
			XVK_CHECK_FUNC(vkCmdDebugMarkerEndEXT)
			vkCmdDebugMarkerEndEXT(commandBuffer);
		}

		inline void CmdDebugMarkerInsertEXT (VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo) {
			XVK_CHECK_FUNC(vkCmdDebugMarkerInsertEXT)
			vkCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
		}

		inline void CmdBindTransformFeedbackBuffersEXT (VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes) {
			XVK_CHECK_FUNC(vkCmdBindTransformFeedbackBuffersEXT)
			vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
		}

		inline void CmdBeginTransformFeedbackEXT (VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer* pCounterBuffers, const VkDeviceSize* pCounterBufferOffsets) {
			XVK_CHECK_FUNC(vkCmdBeginTransformFeedbackEXT)
			vkCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
		}

		inline void CmdEndTransformFeedbackEXT (VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer* pCounterBuffers, const VkDeviceSize* pCounterBufferOffsets) {
			XVK_CHECK_FUNC(vkCmdEndTransformFeedbackEXT)
			vkCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
		}

		inline void CmdBeginQueryIndexedEXT (VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index) {
			XVK_CHECK_FUNC(vkCmdBeginQueryIndexedEXT)
			vkCmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);
		}

		inline void CmdEndQueryIndexedEXT (VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index) {
			XVK_CHECK_FUNC(vkCmdEndQueryIndexedEXT)
			vkCmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);
		}

		inline void CmdDrawIndirectByteCountEXT (VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride) {
			XVK_CHECK_FUNC(vkCmdDrawIndirectByteCountEXT)
			vkCmdDrawIndirectByteCountEXT(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
		}

		inline void CmdDrawIndirectCountAMD (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
			XVK_CHECK_FUNC(vkCmdDrawIndirectCountAMD)
			vkCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
		}

		inline void CmdDrawIndexedIndirectCountAMD (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
			XVK_CHECK_FUNC(vkCmdDrawIndexedIndirectCountAMD)
			vkCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
		}

		inline VkResult GetShaderInfoAMD (VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t* pInfoSize, void* pInfo) {
			XVK_CHECK_FUNC(vkGetShaderInfoAMD)
			return vkGetShaderInfoAMD(handle, pipeline, shaderStage, infoType, pInfoSize, pInfo);
		}

		inline void CmdBeginConditionalRenderingEXT (VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin) {
			XVK_CHECK_FUNC(vkCmdBeginConditionalRenderingEXT)
			vkCmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);
		}

		inline void CmdEndConditionalRenderingEXT (VkCommandBuffer commandBuffer) {
			XVK_CHECK_FUNC(vkCmdEndConditionalRenderingEXT)
			vkCmdEndConditionalRenderingEXT(commandBuffer);
		}

		inline void CmdProcessCommandsNVX (VkCommandBuffer commandBuffer, const VkCmdProcessCommandsInfoNVX* pProcessCommandsInfo) {
			XVK_CHECK_FUNC(vkCmdProcessCommandsNVX)
			vkCmdProcessCommandsNVX(commandBuffer, pProcessCommandsInfo);
		}

		inline void CmdReserveSpaceForCommandsNVX (VkCommandBuffer commandBuffer, const VkCmdReserveSpaceForCommandsInfoNVX* pReserveSpaceInfo) {
			XVK_CHECK_FUNC(vkCmdReserveSpaceForCommandsNVX)
			vkCmdReserveSpaceForCommandsNVX(commandBuffer, pReserveSpaceInfo);
		}

		inline VkResult CreateIndirectCommandsLayoutNVX (const VkIndirectCommandsLayoutCreateInfoNVX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutNVX* pIndirectCommandsLayout) {
			XVK_CHECK_FUNC(vkCreateIndirectCommandsLayoutNVX)
			return vkCreateIndirectCommandsLayoutNVX(handle, pCreateInfo, pAllocator, pIndirectCommandsLayout);
		}

		inline void DestroyIndirectCommandsLayoutNVX (VkIndirectCommandsLayoutNVX indirectCommandsLayout, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyIndirectCommandsLayoutNVX)
			vkDestroyIndirectCommandsLayoutNVX(handle, indirectCommandsLayout, pAllocator);
		}

		inline VkResult CreateObjectTableNVX (const VkObjectTableCreateInfoNVX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkObjectTableNVX* pObjectTable) {
			XVK_CHECK_FUNC(vkCreateObjectTableNVX)
			return vkCreateObjectTableNVX(handle, pCreateInfo, pAllocator, pObjectTable);
		}

		inline void DestroyObjectTableNVX (VkObjectTableNVX objectTable, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyObjectTableNVX)
			vkDestroyObjectTableNVX(handle, objectTable, pAllocator);
		}

		inline VkResult RegisterObjectsNVX (VkObjectTableNVX objectTable, uint32_t objectCount, const VkObjectTableEntryNVX* const*    ppObjectTableEntries, const uint32_t* pObjectIndices) {
			XVK_CHECK_FUNC(vkRegisterObjectsNVX)
			return vkRegisterObjectsNVX(handle, objectTable, objectCount, ppObjectTableEntries, pObjectIndices);
		}

		inline VkResult UnregisterObjectsNVX (VkObjectTableNVX objectTable, uint32_t objectCount, const VkObjectEntryTypeNVX* pObjectEntryTypes, const uint32_t* pObjectIndices) {
			XVK_CHECK_FUNC(vkUnregisterObjectsNVX)
			return vkUnregisterObjectsNVX(handle, objectTable, objectCount, pObjectEntryTypes, pObjectIndices);
		}

		inline void CmdSetViewportWScalingNV (VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportWScalingNV* pViewportWScalings) {
			XVK_CHECK_FUNC(vkCmdSetViewportWScalingNV)
			vkCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
		}

		inline VkResult DisplayPowerControlEXT (VkDisplayKHR display, const VkDisplayPowerInfoEXT* pDisplayPowerInfo) {
			XVK_CHECK_FUNC(vkDisplayPowerControlEXT)
			return vkDisplayPowerControlEXT(handle, display, pDisplayPowerInfo);
		}

		inline VkResult RegisterDeviceEventEXT (const VkDeviceEventInfoEXT* pDeviceEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence) {
			XVK_CHECK_FUNC(vkRegisterDeviceEventEXT)
			return vkRegisterDeviceEventEXT(handle, pDeviceEventInfo, pAllocator, pFence);
		}

		inline VkResult RegisterDisplayEventEXT (VkDisplayKHR display, const VkDisplayEventInfoEXT* pDisplayEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence) {
			XVK_CHECK_FUNC(vkRegisterDisplayEventEXT)
			return vkRegisterDisplayEventEXT(handle, display, pDisplayEventInfo, pAllocator, pFence);
		}

		inline VkResult GetSwapchainCounterEXT (VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t* pCounterValue) {
			XVK_CHECK_FUNC(vkGetSwapchainCounterEXT)
			return vkGetSwapchainCounterEXT(handle, swapchain, counter, pCounterValue);
		}

		inline VkResult GetRefreshCycleDurationGOOGLE (VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties) {
			XVK_CHECK_FUNC(vkGetRefreshCycleDurationGOOGLE)
			return vkGetRefreshCycleDurationGOOGLE(handle, swapchain, pDisplayTimingProperties);
		}

		inline VkResult GetPastPresentationTimingGOOGLE (VkSwapchainKHR swapchain, uint32_t* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings) {
			XVK_CHECK_FUNC(vkGetPastPresentationTimingGOOGLE)
			return vkGetPastPresentationTimingGOOGLE(handle, swapchain, pPresentationTimingCount, pPresentationTimings);
		}

		inline void CmdSetDiscardRectangleEXT (VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const VkRect2D* pDiscardRectangles) {
			XVK_CHECK_FUNC(vkCmdSetDiscardRectangleEXT)
			vkCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
		}

		inline void SetHdrMetadataEXT (uint32_t swapchainCount, const VkSwapchainKHR* pSwapchains, const VkHdrMetadataEXT* pMetadata) {
			XVK_CHECK_FUNC(vkSetHdrMetadataEXT)
			vkSetHdrMetadataEXT(handle, swapchainCount, pSwapchains, pMetadata);
		}

		inline VkResult SetDebugUtilsObjectNameEXT (const VkDebugUtilsObjectNameInfoEXT* pNameInfo) {
			XVK_CHECK_FUNC(vkSetDebugUtilsObjectNameEXT)
			return vkSetDebugUtilsObjectNameEXT(handle, pNameInfo);
		}

		inline VkResult SetDebugUtilsObjectTagEXT (const VkDebugUtilsObjectTagInfoEXT* pTagInfo) {
			XVK_CHECK_FUNC(vkSetDebugUtilsObjectTagEXT)
			return vkSetDebugUtilsObjectTagEXT(handle, pTagInfo);
		}

		inline void QueueBeginDebugUtilsLabelEXT (VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo) {
			XVK_CHECK_FUNC(vkQueueBeginDebugUtilsLabelEXT)
			vkQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);
		}

		inline void QueueEndDebugUtilsLabelEXT (VkQueue queue) {
			XVK_CHECK_FUNC(vkQueueEndDebugUtilsLabelEXT)
			vkQueueEndDebugUtilsLabelEXT(queue);
		}

		inline void QueueInsertDebugUtilsLabelEXT (VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo) {
			XVK_CHECK_FUNC(vkQueueInsertDebugUtilsLabelEXT)
			vkQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);
		}

		inline void CmdBeginDebugUtilsLabelEXT (VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo) {
			XVK_CHECK_FUNC(vkCmdBeginDebugUtilsLabelEXT)
			vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
		}

		inline void CmdEndDebugUtilsLabelEXT (VkCommandBuffer commandBuffer) {
			XVK_CHECK_FUNC(vkCmdEndDebugUtilsLabelEXT)
			vkCmdEndDebugUtilsLabelEXT(commandBuffer);
		}

		inline void CmdInsertDebugUtilsLabelEXT (VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo) {
			XVK_CHECK_FUNC(vkCmdInsertDebugUtilsLabelEXT)
			vkCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
		}

		inline void CmdSetSampleLocationsEXT (VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT* pSampleLocationsInfo) {
			XVK_CHECK_FUNC(vkCmdSetSampleLocationsEXT)
			vkCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
		}

		inline VkResult GetImageDrmFormatModifierPropertiesEXT (VkImage image, VkImageDrmFormatModifierPropertiesEXT* pProperties) {
			XVK_CHECK_FUNC(vkGetImageDrmFormatModifierPropertiesEXT)
			return vkGetImageDrmFormatModifierPropertiesEXT(handle, image, pProperties);
		}

		inline VkResult CreateValidationCacheEXT (const VkValidationCacheCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkValidationCacheEXT* pValidationCache) {
			XVK_CHECK_FUNC(vkCreateValidationCacheEXT)
			return vkCreateValidationCacheEXT(handle, pCreateInfo, pAllocator, pValidationCache);
		}

		inline void DestroyValidationCacheEXT (VkValidationCacheEXT validationCache, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyValidationCacheEXT)
			vkDestroyValidationCacheEXT(handle, validationCache, pAllocator);
		}

		inline VkResult MergeValidationCachesEXT (VkValidationCacheEXT dstCache, uint32_t srcCacheCount, const VkValidationCacheEXT* pSrcCaches) {
			XVK_CHECK_FUNC(vkMergeValidationCachesEXT)
			return vkMergeValidationCachesEXT(handle, dstCache, srcCacheCount, pSrcCaches);
		}

		inline VkResult GetValidationCacheDataEXT (VkValidationCacheEXT validationCache, size_t* pDataSize, void* pData) {
			XVK_CHECK_FUNC(vkGetValidationCacheDataEXT)
			return vkGetValidationCacheDataEXT(handle, validationCache, pDataSize, pData);
		}

		inline void CmdBindShadingRateImageNV (VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout) {
			XVK_CHECK_FUNC(vkCmdBindShadingRateImageNV)
			vkCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);
		}

		inline void CmdSetViewportShadingRatePaletteNV (VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkShadingRatePaletteNV* pShadingRatePalettes) {
			XVK_CHECK_FUNC(vkCmdSetViewportShadingRatePaletteNV)
			vkCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
		}

		inline void CmdSetCoarseSampleOrderNV (VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const VkCoarseSampleOrderCustomNV* pCustomSampleOrders) {
			XVK_CHECK_FUNC(vkCmdSetCoarseSampleOrderNV)
			vkCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
		}

		inline VkResult CreateAccelerationStructureNV (const VkAccelerationStructureCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkAccelerationStructureNV* pAccelerationStructure) {
			XVK_CHECK_FUNC(vkCreateAccelerationStructureNV)
			return vkCreateAccelerationStructureNV(handle, pCreateInfo, pAllocator, pAccelerationStructure);
		}

		inline void DestroyAccelerationStructureNV (VkAccelerationStructureNV accelerationStructure, const VkAllocationCallbacks* pAllocator) {
			XVK_CHECK_FUNC(vkDestroyAccelerationStructureNV)
			vkDestroyAccelerationStructureNV(handle, accelerationStructure, pAllocator);
		}

		inline void GetAccelerationStructureMemoryRequirementsNV (const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) {
			XVK_CHECK_FUNC(vkGetAccelerationStructureMemoryRequirementsNV)
			vkGetAccelerationStructureMemoryRequirementsNV(handle, pInfo, pMemoryRequirements);
		}

		inline VkResult BindAccelerationStructureMemoryNV (uint32_t bindInfoCount, const VkBindAccelerationStructureMemoryInfoNV* pBindInfos) {
			XVK_CHECK_FUNC(vkBindAccelerationStructureMemoryNV)
			return vkBindAccelerationStructureMemoryNV(handle, bindInfoCount, pBindInfos);
		}

		inline void CmdBuildAccelerationStructureNV (VkCommandBuffer commandBuffer, const VkAccelerationStructureInfoNV* pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset) {
			XVK_CHECK_FUNC(vkCmdBuildAccelerationStructureNV)
			vkCmdBuildAccelerationStructureNV(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
		}

		inline void CmdCopyAccelerationStructureNV (VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeNV mode) {
			XVK_CHECK_FUNC(vkCmdCopyAccelerationStructureNV)
			vkCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);
		}

		inline void CmdTraceRaysNV (VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth) {
			XVK_CHECK_FUNC(vkCmdTraceRaysNV)
			vkCmdTraceRaysNV(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
		}

		inline VkResult CreateRayTracingPipelinesNV (VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoNV* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
			XVK_CHECK_FUNC(vkCreateRayTracingPipelinesNV)
			return vkCreateRayTracingPipelinesNV(handle, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
		}

		inline VkResult GetRayTracingShaderGroupHandlesNV (VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData) {
			XVK_CHECK_FUNC(vkGetRayTracingShaderGroupHandlesNV)
			return vkGetRayTracingShaderGroupHandlesNV(handle, pipeline, firstGroup, groupCount, dataSize, pData);
		}

		inline VkResult GetAccelerationStructureHandleNV (VkAccelerationStructureNV accelerationStructure, size_t dataSize, void* pData) {
			XVK_CHECK_FUNC(vkGetAccelerationStructureHandleNV)
			return vkGetAccelerationStructureHandleNV(handle, accelerationStructure, dataSize, pData);
		}

		inline void CmdWriteAccelerationStructuresPropertiesNV (VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureNV* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery) {
			XVK_CHECK_FUNC(vkCmdWriteAccelerationStructuresPropertiesNV)
			vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
		}

		inline VkResult CompileDeferredNV (VkPipeline pipeline, uint32_t shader) {
			XVK_CHECK_FUNC(vkCompileDeferredNV)
			return vkCompileDeferredNV(handle, pipeline, shader);
		}

		inline VkResult GetMemoryHostPointerPropertiesEXT (VkExternalMemoryHandleTypeFlagBits handleType, const void* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties) {
			XVK_CHECK_FUNC(vkGetMemoryHostPointerPropertiesEXT)
			return vkGetMemoryHostPointerPropertiesEXT(handle, handleType, pHostPointer, pMemoryHostPointerProperties);
		}

		inline void CmdWriteBufferMarkerAMD (VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker) {
			XVK_CHECK_FUNC(vkCmdWriteBufferMarkerAMD)
			vkCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
		}

		inline VkResult GetCalibratedTimestampsEXT (uint32_t timestampCount, const VkCalibratedTimestampInfoEXT* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation) {
			XVK_CHECK_FUNC(vkGetCalibratedTimestampsEXT)
			return vkGetCalibratedTimestampsEXT(handle, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
		}

		inline void CmdDrawMeshTasksNV (VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask) {
			XVK_CHECK_FUNC(vkCmdDrawMeshTasksNV)
			vkCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);
		}

		inline void CmdDrawMeshTasksIndirectNV (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
			XVK_CHECK_FUNC(vkCmdDrawMeshTasksIndirectNV)
			vkCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);
		}

		inline void CmdDrawMeshTasksIndirectCountNV (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
			XVK_CHECK_FUNC(vkCmdDrawMeshTasksIndirectCountNV)
			vkCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
		}

		inline void CmdSetExclusiveScissorNV (VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkRect2D* pExclusiveScissors) {
			XVK_CHECK_FUNC(vkCmdSetExclusiveScissorNV)
			vkCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
		}

		inline void CmdSetCheckpointNV (VkCommandBuffer commandBuffer, const void* pCheckpointMarker) {
			XVK_CHECK_FUNC(vkCmdSetCheckpointNV)
			vkCmdSetCheckpointNV(commandBuffer, pCheckpointMarker);
		}

		inline void GetQueueCheckpointDataNV (VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData) {
			XVK_CHECK_FUNC(vkGetQueueCheckpointDataNV)
			vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);
		}

		inline VkResult InitializePerformanceApiINTEL (const VkInitializePerformanceApiInfoINTEL* pInitializeInfo) {
			XVK_CHECK_FUNC(vkInitializePerformanceApiINTEL)
			return vkInitializePerformanceApiINTEL(handle, pInitializeInfo);
		}

		inline void UninitializePerformanceApiINTEL (VkDevice device) {
			XVK_CHECK_FUNC(vkUninitializePerformanceApiINTEL)
			vkUninitializePerformanceApiINTEL(device);
		}

		inline VkResult CmdSetPerformanceMarkerINTEL (VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL* pMarkerInfo) {
			XVK_CHECK_FUNC(vkCmdSetPerformanceMarkerINTEL)
			return vkCmdSetPerformanceMarkerINTEL(commandBuffer, pMarkerInfo);
		}

		inline VkResult CmdSetPerformanceStreamMarkerINTEL (VkCommandBuffer commandBuffer, const VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo) {
			XVK_CHECK_FUNC(vkCmdSetPerformanceStreamMarkerINTEL)
			return vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer, pMarkerInfo);
		}

		inline VkResult CmdSetPerformanceOverrideINTEL (VkCommandBuffer commandBuffer, const VkPerformanceOverrideInfoINTEL* pOverrideInfo) {
			XVK_CHECK_FUNC(vkCmdSetPerformanceOverrideINTEL)
			return vkCmdSetPerformanceOverrideINTEL(commandBuffer, pOverrideInfo);
		}

		inline VkResult AcquirePerformanceConfigurationINTEL (const VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, VkPerformanceConfigurationINTEL* pConfiguration) {
			XVK_CHECK_FUNC(vkAcquirePerformanceConfigurationINTEL)
			return vkAcquirePerformanceConfigurationINTEL(handle, pAcquireInfo, pConfiguration);
		}

		inline VkResult ReleasePerformanceConfigurationINTEL (VkPerformanceConfigurationINTEL configuration) {
			XVK_CHECK_FUNC(vkReleasePerformanceConfigurationINTEL)
			return vkReleasePerformanceConfigurationINTEL(handle, configuration);
		}

		inline VkResult QueueSetPerformanceConfigurationINTEL (VkQueue queue, VkPerformanceConfigurationINTEL configuration) {
			XVK_CHECK_FUNC(vkQueueSetPerformanceConfigurationINTEL)
			return vkQueueSetPerformanceConfigurationINTEL(queue, configuration);
		}

		inline VkResult GetPerformanceParameterINTEL (VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue) {
			XVK_CHECK_FUNC(vkGetPerformanceParameterINTEL)
			return vkGetPerformanceParameterINTEL(handle, parameter, pValue);
		}

		inline void SetLocalDimmingAMD (VkSwapchainKHR swapChain, VkBool32 localDimmingEnable) {
			XVK_CHECK_FUNC(vkSetLocalDimmingAMD)
			vkSetLocalDimmingAMD(handle, swapChain, localDimmingEnable);
		}

		inline void CmdSetLineStippleEXT (VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern) {
			XVK_CHECK_FUNC(vkCmdSetLineStippleEXT)
			vkCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);
		}

		inline void ResetQueryPoolEXT (VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) {
			XVK_CHECK_FUNC(vkResetQueryPoolEXT)
			vkResetQueryPoolEXT(handle, queryPool, firstQuery, queryCount);
		}

	protected: 
		using DeviceBase::DeviceBase;
		virtual ~DeviceInterface(){}
		void LoadFunctionPointersInterface() override {
			LOAD_XVK_DEVICE_FUNC( vkDestroyDevice )
			LOAD_XVK_DEVICE_FUNC( vkGetDeviceQueue )
			LOAD_XVK_DEVICE_FUNC( vkQueueSubmit )
			LOAD_XVK_DEVICE_FUNC( vkQueueWaitIdle )
			LOAD_XVK_DEVICE_FUNC( vkDeviceWaitIdle )
			LOAD_XVK_DEVICE_FUNC( vkAllocateMemory )
			LOAD_XVK_DEVICE_FUNC( vkFreeMemory )
			LOAD_XVK_DEVICE_FUNC( vkMapMemory )
			LOAD_XVK_DEVICE_FUNC( vkUnmapMemory )
			LOAD_XVK_DEVICE_FUNC( vkFlushMappedMemoryRanges )
			LOAD_XVK_DEVICE_FUNC( vkInvalidateMappedMemoryRanges )
			LOAD_XVK_DEVICE_FUNC( vkGetDeviceMemoryCommitment )
			LOAD_XVK_DEVICE_FUNC( vkBindBufferMemory )
			LOAD_XVK_DEVICE_FUNC( vkBindImageMemory )
			LOAD_XVK_DEVICE_FUNC( vkGetBufferMemoryRequirements )
			LOAD_XVK_DEVICE_FUNC( vkGetImageMemoryRequirements )
			LOAD_XVK_DEVICE_FUNC( vkGetImageSparseMemoryRequirements )
			LOAD_XVK_DEVICE_FUNC( vkQueueBindSparse )
			LOAD_XVK_DEVICE_FUNC( vkCreateFence )
			LOAD_XVK_DEVICE_FUNC( vkDestroyFence )
			LOAD_XVK_DEVICE_FUNC( vkResetFences )
			LOAD_XVK_DEVICE_FUNC( vkGetFenceStatus )
			LOAD_XVK_DEVICE_FUNC( vkWaitForFences )
			LOAD_XVK_DEVICE_FUNC( vkCreateSemaphore )
			LOAD_XVK_DEVICE_FUNC( vkDestroySemaphore )
			LOAD_XVK_DEVICE_FUNC( vkCreateEvent )
			LOAD_XVK_DEVICE_FUNC( vkDestroyEvent )
			LOAD_XVK_DEVICE_FUNC( vkGetEventStatus )
			LOAD_XVK_DEVICE_FUNC( vkSetEvent )
			LOAD_XVK_DEVICE_FUNC( vkResetEvent )
			LOAD_XVK_DEVICE_FUNC( vkCreateQueryPool )
			LOAD_XVK_DEVICE_FUNC( vkDestroyQueryPool )
			LOAD_XVK_DEVICE_FUNC( vkGetQueryPoolResults )
			LOAD_XVK_DEVICE_FUNC( vkCreateBuffer )
			LOAD_XVK_DEVICE_FUNC( vkDestroyBuffer )
			LOAD_XVK_DEVICE_FUNC( vkCreateBufferView )
			LOAD_XVK_DEVICE_FUNC( vkDestroyBufferView )
			LOAD_XVK_DEVICE_FUNC( vkCreateImage )
			LOAD_XVK_DEVICE_FUNC( vkDestroyImage )
			LOAD_XVK_DEVICE_FUNC( vkGetImageSubresourceLayout )
			LOAD_XVK_DEVICE_FUNC( vkCreateImageView )
			LOAD_XVK_DEVICE_FUNC( vkDestroyImageView )
			LOAD_XVK_DEVICE_FUNC( vkCreateShaderModule )
			LOAD_XVK_DEVICE_FUNC( vkDestroyShaderModule )
			LOAD_XVK_DEVICE_FUNC( vkCreatePipelineCache )
			LOAD_XVK_DEVICE_FUNC( vkDestroyPipelineCache )
			LOAD_XVK_DEVICE_FUNC( vkGetPipelineCacheData )
			LOAD_XVK_DEVICE_FUNC( vkMergePipelineCaches )
			LOAD_XVK_DEVICE_FUNC( vkCreateGraphicsPipelines )
			LOAD_XVK_DEVICE_FUNC( vkCreateComputePipelines )
			LOAD_XVK_DEVICE_FUNC( vkDestroyPipeline )
			LOAD_XVK_DEVICE_FUNC( vkCreatePipelineLayout )
			LOAD_XVK_DEVICE_FUNC( vkDestroyPipelineLayout )
			LOAD_XVK_DEVICE_FUNC( vkCreateSampler )
			LOAD_XVK_DEVICE_FUNC( vkDestroySampler )
			LOAD_XVK_DEVICE_FUNC( vkCreateDescriptorSetLayout )
			LOAD_XVK_DEVICE_FUNC( vkDestroyDescriptorSetLayout )
			LOAD_XVK_DEVICE_FUNC( vkCreateDescriptorPool )
			LOAD_XVK_DEVICE_FUNC( vkDestroyDescriptorPool )
			LOAD_XVK_DEVICE_FUNC( vkResetDescriptorPool )
			LOAD_XVK_DEVICE_FUNC( vkAllocateDescriptorSets )
			LOAD_XVK_DEVICE_FUNC( vkFreeDescriptorSets )
			LOAD_XVK_DEVICE_FUNC( vkUpdateDescriptorSets )
			LOAD_XVK_DEVICE_FUNC( vkCreateFramebuffer )
			LOAD_XVK_DEVICE_FUNC( vkDestroyFramebuffer )
			LOAD_XVK_DEVICE_FUNC( vkCreateRenderPass )
			LOAD_XVK_DEVICE_FUNC( vkDestroyRenderPass )
			LOAD_XVK_DEVICE_FUNC( vkGetRenderAreaGranularity )
			LOAD_XVK_DEVICE_FUNC( vkCreateCommandPool )
			LOAD_XVK_DEVICE_FUNC( vkDestroyCommandPool )
			LOAD_XVK_DEVICE_FUNC( vkResetCommandPool )
			LOAD_XVK_DEVICE_FUNC( vkAllocateCommandBuffers )
			LOAD_XVK_DEVICE_FUNC( vkFreeCommandBuffers )
			LOAD_XVK_DEVICE_FUNC( vkBeginCommandBuffer )
			LOAD_XVK_DEVICE_FUNC( vkEndCommandBuffer )
			LOAD_XVK_DEVICE_FUNC( vkResetCommandBuffer )
			LOAD_XVK_DEVICE_FUNC( vkCmdBindPipeline )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetViewport )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetScissor )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetLineWidth )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetDepthBias )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetBlendConstants )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetDepthBounds )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetStencilCompareMask )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetStencilWriteMask )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetStencilReference )
			LOAD_XVK_DEVICE_FUNC( vkCmdBindDescriptorSets )
			LOAD_XVK_DEVICE_FUNC( vkCmdBindIndexBuffer )
			LOAD_XVK_DEVICE_FUNC( vkCmdBindVertexBuffers )
			LOAD_XVK_DEVICE_FUNC( vkCmdDraw )
			LOAD_XVK_DEVICE_FUNC( vkCmdDrawIndexed )
			LOAD_XVK_DEVICE_FUNC( vkCmdDrawIndirect )
			LOAD_XVK_DEVICE_FUNC( vkCmdDrawIndexedIndirect )
			LOAD_XVK_DEVICE_FUNC( vkCmdDispatch )
			LOAD_XVK_DEVICE_FUNC( vkCmdDispatchIndirect )
			LOAD_XVK_DEVICE_FUNC( vkCmdCopyBuffer )
			LOAD_XVK_DEVICE_FUNC( vkCmdCopyImage )
			LOAD_XVK_DEVICE_FUNC( vkCmdBlitImage )
			LOAD_XVK_DEVICE_FUNC( vkCmdCopyBufferToImage )
			LOAD_XVK_DEVICE_FUNC( vkCmdCopyImageToBuffer )
			LOAD_XVK_DEVICE_FUNC( vkCmdUpdateBuffer )
			LOAD_XVK_DEVICE_FUNC( vkCmdFillBuffer )
			LOAD_XVK_DEVICE_FUNC( vkCmdClearColorImage )
			LOAD_XVK_DEVICE_FUNC( vkCmdClearDepthStencilImage )
			LOAD_XVK_DEVICE_FUNC( vkCmdClearAttachments )
			LOAD_XVK_DEVICE_FUNC( vkCmdResolveImage )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetEvent )
			LOAD_XVK_DEVICE_FUNC( vkCmdResetEvent )
			LOAD_XVK_DEVICE_FUNC( vkCmdWaitEvents )
			LOAD_XVK_DEVICE_FUNC( vkCmdPipelineBarrier )
			LOAD_XVK_DEVICE_FUNC( vkCmdBeginQuery )
			LOAD_XVK_DEVICE_FUNC( vkCmdEndQuery )
			LOAD_XVK_DEVICE_FUNC( vkCmdResetQueryPool )
			LOAD_XVK_DEVICE_FUNC( vkCmdWriteTimestamp )
			LOAD_XVK_DEVICE_FUNC( vkCmdCopyQueryPoolResults )
			LOAD_XVK_DEVICE_FUNC( vkCmdPushConstants )
			LOAD_XVK_DEVICE_FUNC( vkCmdBeginRenderPass )
			LOAD_XVK_DEVICE_FUNC( vkCmdNextSubpass )
			LOAD_XVK_DEVICE_FUNC( vkCmdEndRenderPass )
			LOAD_XVK_DEVICE_FUNC( vkCmdExecuteCommands )
			LOAD_XVK_DEVICE_FUNC( vkBindBufferMemory2 )
			LOAD_XVK_DEVICE_FUNC( vkBindImageMemory2 )
			LOAD_XVK_DEVICE_FUNC( vkGetDeviceGroupPeerMemoryFeatures )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetDeviceMask )
			LOAD_XVK_DEVICE_FUNC( vkCmdDispatchBase )
			LOAD_XVK_DEVICE_FUNC( vkGetImageMemoryRequirements2 )
			LOAD_XVK_DEVICE_FUNC( vkGetBufferMemoryRequirements2 )
			LOAD_XVK_DEVICE_FUNC( vkGetImageSparseMemoryRequirements2 )
			LOAD_XVK_DEVICE_FUNC( vkTrimCommandPool )
			LOAD_XVK_DEVICE_FUNC( vkGetDeviceQueue2 )
			LOAD_XVK_DEVICE_FUNC( vkCreateSamplerYcbcrConversion )
			LOAD_XVK_DEVICE_FUNC( vkDestroySamplerYcbcrConversion )
			LOAD_XVK_DEVICE_FUNC( vkCreateDescriptorUpdateTemplate )
			LOAD_XVK_DEVICE_FUNC( vkDestroyDescriptorUpdateTemplate )
			LOAD_XVK_DEVICE_FUNC( vkUpdateDescriptorSetWithTemplate )
			LOAD_XVK_DEVICE_FUNC( vkGetDescriptorSetLayoutSupport )
			LOAD_XVK_DEVICE_FUNC( vkCreateSwapchainKHR )
			LOAD_XVK_DEVICE_FUNC( vkDestroySwapchainKHR )
			LOAD_XVK_DEVICE_FUNC( vkGetSwapchainImagesKHR )
			LOAD_XVK_DEVICE_FUNC( vkAcquireNextImageKHR )
			LOAD_XVK_DEVICE_FUNC( vkQueuePresentKHR )
			LOAD_XVK_DEVICE_FUNC( vkGetDeviceGroupPresentCapabilitiesKHR )
			LOAD_XVK_DEVICE_FUNC( vkGetDeviceGroupSurfacePresentModesKHR )
			LOAD_XVK_DEVICE_FUNC( vkAcquireNextImage2KHR )
			LOAD_XVK_DEVICE_FUNC( vkCreateSharedSwapchainsKHR )
			LOAD_XVK_DEVICE_FUNC( vkGetDeviceGroupPeerMemoryFeaturesKHR )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetDeviceMaskKHR )
			LOAD_XVK_DEVICE_FUNC( vkCmdDispatchBaseKHR )
			LOAD_XVK_DEVICE_FUNC( vkTrimCommandPoolKHR )
			LOAD_XVK_DEVICE_FUNC( vkGetMemoryFdKHR )
			LOAD_XVK_DEVICE_FUNC( vkGetMemoryFdPropertiesKHR )
			LOAD_XVK_DEVICE_FUNC( vkImportSemaphoreFdKHR )
			LOAD_XVK_DEVICE_FUNC( vkGetSemaphoreFdKHR )
			LOAD_XVK_DEVICE_FUNC( vkCmdPushDescriptorSetKHR )
			LOAD_XVK_DEVICE_FUNC( vkCmdPushDescriptorSetWithTemplateKHR )
			LOAD_XVK_DEVICE_FUNC( vkCreateDescriptorUpdateTemplateKHR )
			LOAD_XVK_DEVICE_FUNC( vkDestroyDescriptorUpdateTemplateKHR )
			LOAD_XVK_DEVICE_FUNC( vkUpdateDescriptorSetWithTemplateKHR )
			LOAD_XVK_DEVICE_FUNC( vkCreateRenderPass2KHR )
			LOAD_XVK_DEVICE_FUNC( vkCmdBeginRenderPass2KHR )
			LOAD_XVK_DEVICE_FUNC( vkCmdNextSubpass2KHR )
			LOAD_XVK_DEVICE_FUNC( vkCmdEndRenderPass2KHR )
			LOAD_XVK_DEVICE_FUNC( vkGetSwapchainStatusKHR )
			LOAD_XVK_DEVICE_FUNC( vkImportFenceFdKHR )
			LOAD_XVK_DEVICE_FUNC( vkGetFenceFdKHR )
			LOAD_XVK_DEVICE_FUNC( vkGetImageMemoryRequirements2KHR )
			LOAD_XVK_DEVICE_FUNC( vkGetBufferMemoryRequirements2KHR )
			LOAD_XVK_DEVICE_FUNC( vkGetImageSparseMemoryRequirements2KHR )
			LOAD_XVK_DEVICE_FUNC( vkCreateSamplerYcbcrConversionKHR )
			LOAD_XVK_DEVICE_FUNC( vkDestroySamplerYcbcrConversionKHR )
			LOAD_XVK_DEVICE_FUNC( vkBindBufferMemory2KHR )
			LOAD_XVK_DEVICE_FUNC( vkBindImageMemory2KHR )
			LOAD_XVK_DEVICE_FUNC( vkGetDescriptorSetLayoutSupportKHR )
			LOAD_XVK_DEVICE_FUNC( vkCmdDrawIndirectCountKHR )
			LOAD_XVK_DEVICE_FUNC( vkCmdDrawIndexedIndirectCountKHR )
			LOAD_XVK_DEVICE_FUNC( vkGetSemaphoreCounterValueKHR )
			LOAD_XVK_DEVICE_FUNC( vkWaitSemaphoresKHR )
			LOAD_XVK_DEVICE_FUNC( vkSignalSemaphoreKHR )
			LOAD_XVK_DEVICE_FUNC( vkGetPipelineExecutablePropertiesKHR )
			LOAD_XVK_DEVICE_FUNC( vkGetPipelineExecutableStatisticsKHR )
			LOAD_XVK_DEVICE_FUNC( vkGetPipelineExecutableInternalRepresentationsKHR )
			LOAD_XVK_DEVICE_FUNC( vkDebugMarkerSetObjectTagEXT )
			LOAD_XVK_DEVICE_FUNC( vkDebugMarkerSetObjectNameEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdDebugMarkerBeginEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdDebugMarkerEndEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdDebugMarkerInsertEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdBindTransformFeedbackBuffersEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdBeginTransformFeedbackEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdEndTransformFeedbackEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdBeginQueryIndexedEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdEndQueryIndexedEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdDrawIndirectByteCountEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdDrawIndirectCountAMD )
			LOAD_XVK_DEVICE_FUNC( vkCmdDrawIndexedIndirectCountAMD )
			LOAD_XVK_DEVICE_FUNC( vkGetShaderInfoAMD )
			LOAD_XVK_DEVICE_FUNC( vkCmdBeginConditionalRenderingEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdEndConditionalRenderingEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdProcessCommandsNVX )
			LOAD_XVK_DEVICE_FUNC( vkCmdReserveSpaceForCommandsNVX )
			LOAD_XVK_DEVICE_FUNC( vkCreateIndirectCommandsLayoutNVX )
			LOAD_XVK_DEVICE_FUNC( vkDestroyIndirectCommandsLayoutNVX )
			LOAD_XVK_DEVICE_FUNC( vkCreateObjectTableNVX )
			LOAD_XVK_DEVICE_FUNC( vkDestroyObjectTableNVX )
			LOAD_XVK_DEVICE_FUNC( vkRegisterObjectsNVX )
			LOAD_XVK_DEVICE_FUNC( vkUnregisterObjectsNVX )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetViewportWScalingNV )
			LOAD_XVK_DEVICE_FUNC( vkDisplayPowerControlEXT )
			LOAD_XVK_DEVICE_FUNC( vkRegisterDeviceEventEXT )
			LOAD_XVK_DEVICE_FUNC( vkRegisterDisplayEventEXT )
			LOAD_XVK_DEVICE_FUNC( vkGetSwapchainCounterEXT )
			LOAD_XVK_DEVICE_FUNC( vkGetRefreshCycleDurationGOOGLE )
			LOAD_XVK_DEVICE_FUNC( vkGetPastPresentationTimingGOOGLE )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetDiscardRectangleEXT )
			LOAD_XVK_DEVICE_FUNC( vkSetHdrMetadataEXT )
			LOAD_XVK_DEVICE_FUNC( vkSetDebugUtilsObjectNameEXT )
			LOAD_XVK_DEVICE_FUNC( vkSetDebugUtilsObjectTagEXT )
			LOAD_XVK_DEVICE_FUNC( vkQueueBeginDebugUtilsLabelEXT )
			LOAD_XVK_DEVICE_FUNC( vkQueueEndDebugUtilsLabelEXT )
			LOAD_XVK_DEVICE_FUNC( vkQueueInsertDebugUtilsLabelEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdBeginDebugUtilsLabelEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdEndDebugUtilsLabelEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdInsertDebugUtilsLabelEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetSampleLocationsEXT )
			LOAD_XVK_DEVICE_FUNC( vkGetImageDrmFormatModifierPropertiesEXT )
			LOAD_XVK_DEVICE_FUNC( vkCreateValidationCacheEXT )
			LOAD_XVK_DEVICE_FUNC( vkDestroyValidationCacheEXT )
			LOAD_XVK_DEVICE_FUNC( vkMergeValidationCachesEXT )
			LOAD_XVK_DEVICE_FUNC( vkGetValidationCacheDataEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdBindShadingRateImageNV )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetViewportShadingRatePaletteNV )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetCoarseSampleOrderNV )
			LOAD_XVK_DEVICE_FUNC( vkCreateAccelerationStructureNV )
			LOAD_XVK_DEVICE_FUNC( vkDestroyAccelerationStructureNV )
			LOAD_XVK_DEVICE_FUNC( vkGetAccelerationStructureMemoryRequirementsNV )
			LOAD_XVK_DEVICE_FUNC( vkBindAccelerationStructureMemoryNV )
			LOAD_XVK_DEVICE_FUNC( vkCmdBuildAccelerationStructureNV )
			LOAD_XVK_DEVICE_FUNC( vkCmdCopyAccelerationStructureNV )
			LOAD_XVK_DEVICE_FUNC( vkCmdTraceRaysNV )
			LOAD_XVK_DEVICE_FUNC( vkCreateRayTracingPipelinesNV )
			LOAD_XVK_DEVICE_FUNC( vkGetRayTracingShaderGroupHandlesNV )
			LOAD_XVK_DEVICE_FUNC( vkGetAccelerationStructureHandleNV )
			LOAD_XVK_DEVICE_FUNC( vkCmdWriteAccelerationStructuresPropertiesNV )
			LOAD_XVK_DEVICE_FUNC( vkCompileDeferredNV )
			LOAD_XVK_DEVICE_FUNC( vkGetMemoryHostPointerPropertiesEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdWriteBufferMarkerAMD )
			LOAD_XVK_DEVICE_FUNC( vkGetCalibratedTimestampsEXT )
			LOAD_XVK_DEVICE_FUNC( vkCmdDrawMeshTasksNV )
			LOAD_XVK_DEVICE_FUNC( vkCmdDrawMeshTasksIndirectNV )
			LOAD_XVK_DEVICE_FUNC( vkCmdDrawMeshTasksIndirectCountNV )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetExclusiveScissorNV )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetCheckpointNV )
			LOAD_XVK_DEVICE_FUNC( vkGetQueueCheckpointDataNV )
			LOAD_XVK_DEVICE_FUNC( vkInitializePerformanceApiINTEL )
			LOAD_XVK_DEVICE_FUNC( vkUninitializePerformanceApiINTEL )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetPerformanceMarkerINTEL )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetPerformanceStreamMarkerINTEL )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetPerformanceOverrideINTEL )
			LOAD_XVK_DEVICE_FUNC( vkAcquirePerformanceConfigurationINTEL )
			LOAD_XVK_DEVICE_FUNC( vkReleasePerformanceConfigurationINTEL )
			LOAD_XVK_DEVICE_FUNC( vkQueueSetPerformanceConfigurationINTEL )
			LOAD_XVK_DEVICE_FUNC( vkGetPerformanceParameterINTEL )
			LOAD_XVK_DEVICE_FUNC( vkSetLocalDimmingAMD )
			LOAD_XVK_DEVICE_FUNC( vkCmdSetLineStippleEXT )
			LOAD_XVK_DEVICE_FUNC( vkResetQueryPoolEXT )

		}
	};
}}
